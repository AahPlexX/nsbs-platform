name: tailwind-merge
version: "3.3.1" # exact, no ranges
scope: "JS/TS runtime utility for resolving Tailwind CSS class conflicts"
supported_tailwind_versions:
  exact_range: ">=4.0.0 <4.2.0"
  notes: |
    The library explicitly supports Tailwind CSS v4.0–v4.1. Use tailwind-merge v2.6.x if you ever target Tailwind v3.
    (Your project targets Tailwind 4.1.x — ✅ compatible.)

sources:
  npm: "tailwind-merge@3.3.1"   # install via pnpm add tailwind-merge@3.3.1 -E
  repository: "https://github.com/dcastil/tailwind-merge" # docs/readme + release notes (v3 line)

installation:
  pnpm: "pnpm add tailwind-merge@3.3.1 -E"
  npm:  "npm i tailwind-merge@3.3.1 --save-exact"
  yarn: "yarn add tailwind-merge@3.3.1 --exact"

purpose_and_behavior:
  what_it_does: |
    Produces a single, conflict-free Tailwind class string where the “last conflicting class wins”, following Tailwind’s rules
    for variants/modifiers. Non-conflicting classes are preserved. Results are cached for perf.
  critical_guarantees:
    - "Conflict resolution across the same class group (e.g., spacing, bg, text, etc.). Last occurrence wins."
    - "Fully typed; zero runtime deps; modern Node/browsers supported."
    - "Tracks Tailwind v4 spec details more strictly than v2 line (per v3 release)."

api_surface_v3_3_1:
  # The package exports these stable entry points in the v3 line
  functions:
    - name: twMerge
      signature_ts: |
        // TS 5.9.2
        declare function twMerge(...classLists: string[]): string;
      correct_usage: |
        Pass a single composed string (often from clsx) or multiple strings. Use with clsx to handle conditionals/arrays/objects,
        then resolve conflicts with twMerge.
      example: |
        import { twMerge } from 'tailwind-merge';
        const final = twMerge('p-2 bg-red-500', 'p-4 bg-[#B91C1C]'); // 'p-4 bg-[#B91C1C]'
        // combine with clsx (2.1.1):
        import clsx from 'clsx';
        const cn = (...inputs: ClassValue[]) => twMerge(clsx(...inputs));
        // cn('p-2', { 'p-4': true }, ['text-sm', false]) -> 'p-4 text-sm'
      refs: ["npm readme quickstart"]
    - name: extendTailwindMerge
      signature_ts: |
        // Adds to default config (class groups / theme / conflicting groups)
        declare function extendTailwindMerge<TIdsExtended = string>(
          configExtension: Partial<TwMergeUserConfig<TIdsExtended>>
        ): typeof twMerge;
      purpose: |
        Teach tailwind-merge about custom utilities or extended theme tokens so it can continue resolving conflicts correctly.
      example_minimal: |
        import { extendTailwindMerge } from 'tailwind-merge';
        export const twm = extendTailwindMerge({
          extend: {
            classGroups: {
              // treat your custom utilities as a resolvable group
              'text-shadow-size': [{ 'text-shadow': ['', 'sm','md','lg','xl','2xl','3xl','none'] }],
            },
          },
        });
      refs: ["docs: configuration / class groups & recipes"]
    - name: createTailwindMerge
      signature_ts: |
        // Build a fully custom twMerge using your own config generator
        declare function createTailwindMerge(
          configFactory: () => TwMergeCompleteConfig
        ): typeof twMerge;
      purpose: "Use when you want to replace the default config entirely (tree-shake defaults)."
      refs: ["docs: configuration / API reference"]
  config_shapes_core_concepts:
    class_groups: |
      Arrays (and nested “prefix maps”) of mutually exclusive utilities that target the same CSS property.
      "Example: one of 'p-2' | 'p-3' | 'p-4' survives; others in the group are removed."
    conflicting_class_groups: |
      "Explicit cross-group conflicts (e.g., setting that X conflicts with Y) when default rules aren't enough."
    theme_mapping: |
      "Map Tailwind v4 theme variable namespaces to validators so arbitrary/theme values (like colors, spacing) are recognized."
  tailwind_v4_specifics_v3_line:
    breaking_from_v2_line:
      - "Drops Tailwind v3 support; v3.x is Tailwind v4-only." :contentReference[oaicite:13]{index=13}
      - "Prefix rules changed to match v4; do not include the hyphen in custom prefix in config." :contentReference[oaicite:14]{index=14}
      - "Custom separators are no longer supported." :contentReference[oaicite:15]{index=15}
      - "Order-sensitive modifiers are formalized; config requires 'orderSensitiveModifiers' when building custom configs." :contentReference[oaicite:16]{index=16}
      - "Removed legacy validator isLength; use number/fraction validators in v3 config (handled internally by defaults)." :contentReference[oaicite:17]{index=17}

allowed_usage_patterns:
  - "Use twMerge for final conflict resolution; compose with clsx@2.1.1 (as your stack dictates) to handle arrays/objects/conditionals."
  - "Create a single project helper (cn) that does: twMerge(clsx(...inputs))."
  - "Extend config (extendTailwindMerge) whenever you introduce custom utilities (plugins or arbitrary patterns) that might conflict."
  - "Safe with responsive, state, and arbitrary variants per Tailwind v4 spec (e.g., 'md:p-4', 'hover:bg-red-500', '[&_*]:p-2')." :contentReference[oaicite:18]{index=18}
  - "Works with Tailwind 4.1.x, which your project uses." :contentReference[oaicite:19]{index=19}

forbidden_outdated_unusable:
  - "Do NOT use tailwind-merge v2.x with Tailwind v4 (mismatch). Use v3.x only." :contentReference[oaicite:20]{index=20}
  - "Do NOT rely on tailwind-merge to understand your custom utilities unless you extend the config; unknown classes won’t conflict correctly." :contentReference[oaicite:21]{index=21}
  - "Do NOT pass objects/arrays directly to twMerge for conditionals — twMerge expects strings. Use clsx (or similar) first."
  - "Do NOT configure custom separators (unsupported in v3)." :contentReference[oaicite:22]{index=22}
  - "Do NOT include a leading '-' in custom prefix configuration; the v3 line changed prefix semantics." :contentReference[oaicite:23]{index=23}
  - "Do NOT depend on classes removed in Tailwind v4; tailwind-merge v3 won’t support them." :contentReference[oaicite:24]{index=24}
  - "Avoid ambiguous 'fake Tailwind' class names that look like real utilities; merging may produce unexpected removals." :contentReference[oaicite:25]{index=25}

type_safe_helper_canonical:
  file: "app/lib/cn.ts"
  ts_strict: true
  code: |
    // TS 5.9.2, ES2024 target
    import { twMerge } from 'tailwind-merge';
    import type { ClassValue } from 'clsx';
    import clsx from 'clsx';

    // Single source of truth for class composition + conflict resolution
    export function cn(...inputs: ClassValue[]): string {
      return twMerge(clsx(...inputs));
    }

common_recipes:
  merge_default_with_prop:
    code: |
      // Button.tsx
      import { cn } from '@/app/lib/cn';

      export function Button(props: { className?: string; disabled?: boolean; children: React.ReactNode }) {
        return (
          <button
            className={cn(
              // base
              'inline-flex items-center justify-center rounded-xl px-4 py-2 text-sm font-medium',
              // variants
              props.disabled ? 'opacity-50 cursor-not-allowed' : 'hover:shadow-sm',
              // overrides
              props.className
            )}
            disabled={props.disabled}
          >
            {props.children}
          </button>
        );
      }
  extend_for_custom_utilities:
    note: "Teach tw-merge your custom plugin utilities so the 'last one wins' rule applies correctly."
    code: |
      // app/lib/tw-merge.ts
      import { extendTailwindMerge } from 'tailwind-merge';

      // Example: custom 'text-shadow-*' utility with sizes & colors
      export const twm = extendTailwindMerge({
        extend: {
          classGroups: {
            'text-shadow-size': [{ 'text-shadow': ['', 'sm', 'md', 'lg', 'xl', '2xl', '3xl', 'none'] }],
            'text-shadow-color': [{ 'text-shadow': ['black', 'white', 'transparent'] }],
          },
          // Optionally specify explicit conflicts between those two groups
          conflictingClassGroups: {
            'text-shadow-size': ['text-shadow-color'],
            'text-shadow-color': ['text-shadow-size'],
          },
        },
      });

      // then use: twm('text-shadow-sm', 'text-shadow-lg') -> 'text-shadow-lg'

edge_cases_and_limits:
  notes:
    - "Arbitrary values with labels should follow Tailwind v4 syntax; v3 supports arbitrary CSS variable syntax and important modifier position."
    - "Classes that only *look* like Tailwind utilities can be dropped/kept unexpectedly; keep them clearly distinct or extend config." :contentReference[oaicite:26]{index=26}
    - "When you radically customize theme tokens, review whether default theme validators still recognize your values; extend config if needed." :contentReference[oaicite:27]{index=27}

integration_with_stack:
  next_react_ts:
    next: "15.4.7 (app/ router, no 'src/' per your standard)"
    react: "19.1.1"
    typescript: "5.9.2 (strict)"
    tailwind: "4.1.x"
    usage: "No special Next config needed; use 'cn' helper across all components, server and client."
  file_conventions:
    helper_location: "app/lib/cn.ts"
    import_style: "Always import and use `cn` for className composition; disallow raw string concatenation."

ci_and_lint_enforcement:
  eslint_config_patch:
    file: "eslint.local.cjs"
    code: |
      // Load in eslint.config.mjs via `import('./eslint.local.cjs')` and spread the overrides.
      module.exports = {
        rules: {
          // Enforce our helper instead of string concatenation for className
          'no-restricted-syntax': [
            'error',
            {
              selector:
                "JSXAttribute[name.name='className'] > Literal", // className="literal"
              message:
                "Use cn(...) (clsx + twMerge) instead of raw string literals for className. This ensures conflict resolution.",
            },
            {
              selector:
                "JSXAttribute[name.name='className'] JSXExpressionContainer > BinaryExpression[operator='+']",
              message:
                "Do not concatenate className strings. Use cn(...) helper (clsx + twMerge).",
            },
          ],
          // Disallow classnames package — standardize on clsx 2.1.1
          'no-restricted-imports': [
            'error',
            { paths: [{ name: 'classnames', message: 'Use clsx + twMerge (cn helper) instead.' }] },
          ],
        },
        overrides: [
          {
            files: ['**/*.{ts,tsx,jsx}'],
            rules: {
              // Encourage cn(...) usage by flagging suspicious long literals
              'max-len': ['warn', { code: 140, ignoreTemplateLiterals: true, ignoreStrings: false }],
            },
          },
        ],
      };
  ci_regex_guards:
    - name: "forbid_tailwind_merge_v2_or_unpinned"
      description: "Ensure exact 3.3.1 is installed"
      regex: '\"tailwind-merge\"\\s*:\\s*\"(?!3\\.3\\.1\")'
      paths: ["package.json"]
      action_on_match: "fail"
    - name: "detect_raw_classname_concat"
      description: "Catch string concatenation of className"
      regex: "className=\\{[^}]*\\+[^}]*\\}"
      paths: ["**/*.tsx", "**/*.jsx"]
      action_on_match: "warn"
    - name: "detect_literal_classname"
      description: "Discourage hard-coded className literals that may mask conflicts"
      regex: "className=\\\"[^\\{][^\"]+\\\""
      paths: ["**/*.tsx", "**/*.jsx"]
      action_on_match: "warn"
  precommit_example:
    file: ".husky/pre-commit"
    code: |
      #!/usr/bin/env sh
      . "$(dirname "$0")/_/husky.sh"
      pnpm exec eslint . --ext .ts,.tsx
      # CI-style grep checks
      if grep -R --exclude-dir=node_modules -P '"tailwind-merge"\s*:\s*"(?!3\.3\.1")' package.json; then
        echo "ERROR: tailwind-merge must be pinned to 3.3.1"; exit 1; fi
      if grep -R --exclude-dir=node_modules -E 'className=\{[^}]*\+[^}]*\}' -- '**/*.tsx' '**/*.jsx'; then
        echo "WARN: Found className concatenation. Prefer cn(...)."; fi

verification_snippets:
  # quick sanity checks to keep nearby
  basics: |
    import { twMerge } from 'tailwind-merge';
    twMerge('p-2 p-4');                 // 'p-4'
    twMerge('p-3 px-5');                // 'p-3 px-5' (refinement kept)
    twMerge('bg-red-500', 'bg-[#B91C1C]'); // 'bg-[#B91C1C]' (arbitrary last wins) :contentReference[oaicite:28]{index=28}

migration_and_versioning_notes:
  from_v2_to_v3:
    - "Upgrade Tailwind to v4.x first, then adopt tailwind-merge v3.x." :contentReference[oaicite:29]{index=29}
    - "Recheck any custom config (class groups, theme keys). v3 mirrors Tailwind v4 namespaces; some v2 validators were removed." :contentReference[oaicite:30]{index=30}
    - "If you previously relied on custom separators or v3-era prefix positions, remove/update — unsupported in v3." :contentReference[oaicite:31]{index=31}
