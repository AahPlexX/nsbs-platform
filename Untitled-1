

// ===== FILE: c:\Users\eastm\Desktop\nsbs0820\.github\sourceoftruth\clsx_2_1_1.yaml =====

spec:
  name: "clsx-single-source-of-truth"
  version_lock: "2.1.1" # exact; no ^, ~, ranges, or other versions
  library: "clsx"
  description: "Authoritative rules for clsx@2.1.1 usage in Next.js 15.4.6 App Router, React 19.1.1, TS 5.9.2 (strict, target es2024, jsx preserve), Tailwind 4.1.1."
  provenance:
    docs: "https://github.com/lukeed/clsx#readme"
    npm: "https://www.npmjs.com/package/clsx"
    cdn: ["https://unpkg.com/clsx@2.1.1/", "https://cdn.jsdelivr.net/npm/clsx@2.1.1/"]
    last_verified: "2025-08-15"

stack_contract:
  next: "15.4.6" # App Router only; /app/**; no /src or /pages
  react: "19.1.1"
  react-dom: "19.1.1"
  typescript: "5.9.2"
  tsconfig_required:
    compilerOptions:
      strict: true
      target: "es2024"
      module: "node20" # or "nodenext" if your monorepo requires it
      moduleDetection: "force"
      verbatimModuleSyntax: true
      isolatedModules: true
      exactOptionalPropertyTypes: true
      noUncheckedIndexedAccess: true
      jsx: "preserve"
      types: []
  tailwind:
    tailwindcss: "4.1.1"
    "@tailwindcss/postcss": "4.1.1"

install:
  npm:
    - "npm i --save-exact clsx@2.1.1"
  pnpm:
    - "pnpm add -E clsx@2.1.1"
  yarn:
    - "yarn add --exact clsx@2.1.1"

module_artifacts: # confirmed by README & CDN listings
  esm: "dist/clsx.mjs"
  cjs: "dist/clsx.js"
  umd: "dist/clsx.min.js" # for non-bundled browser scenarios
  types:
    - "clsx.d.ts"
    - "clsx.d.mts"
  node_support: "All Node versions supported by project; use ESM/CJS per bundler."
  browser_support_note: "All browsers with Array.isArray (IE9+). For IE8, use clsx@1.0.x only (forbidden here)."

api_surface:
  default_export:
    name: "clsx"
    type: "(...inputs: ClassValue[]) => string"
  named_export:
    name: "clsx"
    from: "clsx"
  type_aliases:
    - "ClassValue"
    - "ClassDictionary"
    - "ClassArray"
  lite_build:
    path: "clsx/lite"
    behavior: "Accepts ONLY string arguments; any non-string is ignored."
  reference: "Usage and API semantics per README." # see citations

semantics:
  inputs_accepted:
    - "string (truthy strings kept; '' discarded)"
    - "number (0 discarded; other numeric values stringified)"
    - "boolean (standalone always discarded)"
    - "null | undefined | NaN (discarded)"
    - "object map { className: truthyFalsy } -> keeps keys with truthy values"
    - "arrays (any depth) -> flattened; values processed with same rules"
  outputs:
    - "Whitespace-separated normalized class string"
  rules_of_thumb:
    - "Falsy values are removed (including 0, '', false, null, undefined, NaN)."
    - "Objects contribute keys whose values are truthy."
    - "Arrays are deeply flattened before evaluation."
    - "Prefer stable keys in object maps to avoid accidental toggles."

allowed_usage:
  imports:
    esm: "import clsx from 'clsx';  // or: import { clsx } from 'clsx';"
    cjs: "const clsx = require('clsx');"
    lite: "import clsx from 'clsx/lite'; // ONLY strings allowed"
  react_next_examples:
    server_component: |
      // app/(group)/page.tsx (Server Component)
      import clsx from 'clsx';
      export default function Page() {
        const isHero = true as const;
        return <h1 className={clsx('text-2xl', isHero && 'font-bold')}>Hello</h1>;
      }
    client_component: |
      // app/components/Button.tsx (Client Component)
      'use client';
      import * as React from 'react';
      import clsx from 'clsx';
      type Props = Readonly<{ primary?: boolean; className?: string; children: React.ReactNode }>;
      export default function Button({ primary = false, className, children }: Props) {
        return (
          <button
            className={clsx(
              'inline-flex items-center rounded px-3 py-1',
              primary ? 'bg-black text-white' : 'bg-white text-black',
              className
            )}
          >
            {children}
          </button>
        );
      }
    tailwind_utility_merging_note: |
      # clsx does not resolve Tailwind class conflicts.
      # Combine clsx with a Tailwind class-merger (e.g., tailwind-merge) at call sites if needed.
      # Keep versions pinned to Tailwind 4.1.1 toolchain in this project.

best_practices:
  general:
    - "Prefer object maps for toggles (readability & diff noise reduction)."
    - "Keep dynamic pieces minimal; precompute booleans."
    - "When many variants exist, extract a helper (e.g., getButtonClasses) returning clsx(...) result."
    - "For Tailwind 4.1.1: keep classes literal where possible to maximize IntelliSense & purge accuracy."
  typing_with_ts_5_9_2:
    - "Annotate inputs if you wrap clsx to ensure only string/object/array are accepted."
    - "Under `verbatimModuleSyntax: true`, import the default or named symbol exactly as used."
  perf:
    - "Use `clsx/lite` if you only ever pass strings (no objects/arrays) to reduce footprint."
  next_app_router:
    - "Use within `className` props in both Server & Client Components."
    - "Do not attempt to compute classes in middleware (no DOM there)."
  tailwind_intellisense:
    vscode_settings_snippet: |
      {
        "tailwindCSS.experimental.classRegex": [
          ["clsx\\(([^)]*)\\)", "(?:'|\"|`)([^'\"`]*)(?:'|\"|`)"]
        ]
      }

forbidden_and_outdated:
  versions:
    - "Any clsx version other than exactly 2.1.1 is forbidden."
    - "Using clsx@1.x (IE8-specific path) is forbidden."
  patterns:
    - "Do NOT import or rely on `classnames` in this codebase; clsx replaces it."
    - "Do NOT pass non-stringifiable complex objects (e.g., DOM nodes, Dates) expecting special handling—only keys from plain object maps are considered."
    - "Do NOT expect Tailwind conflict resolution (e.g., 'p-2' vs 'p-3') from clsx—use a merge utility if needed."
    - "Do NOT use dynamic class strings that bypass Tailwind’s safelisting strategy without configuring Tailwind accordingly."
  repo_structure:
    - "/src/**: forbidden"
    - "/pages/**: forbidden"
  tsconfig_deviations:
    - "Changing target from es2024 or jsx from preserve is forbidden in this project."

ci_enforcement:
  package_json_rules:
    dependencies_exact:
      clsx: "2.1.1"
      next: "15.4.6"
      react: "19.1.1"
      react-dom: "19.1.1"
      typescript: "5.9.2"
      tailwindcss: "4.1.1"
      "@tailwindcss/postcss": "4.1.1"
    forbid_ranges: true # fail if '^', '~', '>=', '*' detected
  filesystem_rules:
    - "Fail if /src or /pages exists."
    - "Fail if /app/layout.tsx missing or missing <html>/<body>."
  grep_rules:
    - pattern: "\\bclassnames\\b"
      action: "fail"
    - pattern: "from 'clsx/lite'"
      note: "allow only when a file is annotated with // clsx-lite-ok and uses strings-only"
  allowed_import_forms:
    - "import clsx from 'clsx'"
    - "import { clsx } from 'clsx'"

reference_snippets:
  simple:
    tsx: "className={clsx('block', isActive && 'text-green-600', disabled && 'opacity-50')}"
  objects:
    tsx: "className={clsx({ 'font-semibold': bold, 'text-gray-500': !bold })}"
  arrays_and_nesting:
    tsx: "className={clsx('p-2', ['rounded', compact && 'px-1'], [['text-sm','leading-5']])}"
  lite_build_only_strings:
    tsx: "import clsx from 'clsx/lite'; className={clsx('text-base', isOn && 'font-bold')}"

security_licensing:
  license: "MIT (clsx)"
  considerations:
    - "No runtime network access."
    - "No transitive dependencies."
    - "Tiny surface area; safe for Server/Client Components."

glossary:
  ClassDictionary: "Record<string, unknown> where truthy values include the key"
  ClassArray: "Array<ClassValue> (recursively flattened)"
  ClassValue: "string | number | boolean | null | undefined | ClassDictionary | ClassArray"

notes:
  - "All behavioral rules above are taken from the official README (inputs, falsy removal, arrays, objects, lite build) and the distribution files present for v2.1.1 on CDN registries."


// ===== FILE: c:\Users\eastm\Desktop\nsbs0820\.github\sourceoftruth\husky_9_1_7.yaml =====

spec:
  name: husky-9.1.7-ssot
  purpose: "Authoritative rules for Git hooks with Husky 9.1.7 in a Next.js App Router repo"
  last_verified: "2025-08-15"

versions:
  husky: "9.1.7" # EXACT — no ^, ~, ranges, or “Vx”
  next: "15.4.6" # EXACT
  react: "19.1.1" # EXACT
  react-dom: "19.1.1" # EXACT
  typescript: "5.9.2" # EXACT
  tailwindcss: "4.1.1" # EXACT
  "@tailwindcss/postcss": "4.1.1" # EXACT

install_and_bootstrap:
  steps:
    - "npm i -D --save-exact husky@9.1.7" # installs Husky
    - "npx husky init" # creates .husky/pre-commit AND updates scripts.prepare to 'husky'  # official
  results:
    - "A .husky/ directory exists with hook files (e.g., .husky/pre-commit)."
    - 'package.json contains { "scripts": { "prepare": "husky" } } (for npm/pnpm). For Yarn, use postinstall per docs.'
  verify:
    - 'node -e "console.log(require(''husky/package.json'').version)"  # must print 9.1.7'

tsconfig_contract:
  file: "tsconfig.json"
  required.compilerOptions:
    target: "ES2024"
    lib: ["ES2024", "DOM", "DOM.Iterable"]
    jsx: "preserve"
    module: "ESNext"
    moduleResolution: "Bundler"
    strict: true
    verbatimModuleSyntax: true
    noUncheckedSideEffectImports: true
    forceConsistentCasingInFileNames: true
    skipLibCheck: false
    noEmit: true

project_layout_contract:
  app_router_only: true
  must_exist: ["/app/layout.tsx", "/app/page.tsx", "/app/globals.css", "/postcss.config.mjs"]
  must_not_exist: ["/src", "/pages"]
  css_setup:
    globals_css_first_line: '@import "tailwindcss";'
  postcss:
    plugins: ["@tailwindcss/postcss"]

core_usage_rules (husky 9.1.7):
  init (recommended):
    command: "npx husky init"
    effects:
      - "Creates a .husky/pre-commit file."
      - "Updates package.json to add: { scripts: { prepare: 'husky' } }."
  add_hooks (simple way):
    how_to:
      - "Create/modify hooks by editing files in .husky/ (e.g., .husky/pre-commit)."
      - "Content is plain POSIX shell; you may call npm scripts, or run shell pipelines."
  valid_hooks_reference:
    note: "Use Git’s official hook names (pre-commit, commit-msg, pre-push, etc.)."
  path_and_engineering_notes:
    - "If hooks don’t run, ensure 'git config core.hooksPath' points to '.husky/_' and Git ≥ 2.9." # official
  disabling_on_CI_or_temporarily:
    env: "HUSKY=0" # globally disables installation/run when set  # official
  package_manager_notes:
    npm_pnpm:
      scripts.prepare: "husky" # manual setup alternative also allowed by docs
    yarn:
      scripts.postinstall: "husky" # Yarn doesn’t support 'prepare'; use 'postinstall' + optional 'pinst' for publishing

allowed_examples:
  pre_commit_minimal: |
    # .husky/pre-commit
    npm test
  pre_commit_ts_lint_prettier: |
    # .husky/pre-commit
    npm run -s typecheck   # e.g., "tsc --noEmit"
    npm run -s lint        # e.g., "eslint . --max-warnings=0"
    npm run -s format:check  # e.g., "prettier --check ."
  commit_msg_with_commitlint (optional): |
    # .husky/commit-msg
    npx --no -- commitlint --edit "$1"

best_practices:
  hooks_content:
    - "Prefer calling project scripts (npm run ...) for portability."
    - "Keep hooks fast; fail early; exit non-zero to block bad commits."
    - "When testing hooks, append 'exit 1' to force failure safely."
  portability:
    - "Write POSIX-compatible shell; not all contributors have bash."
    - "If GUI + Node version manager causes PATH issues, source ~/.config/husky/init.sh to initialize the manager." # official
  repo_hygiene:
    - "Commit only .husky/* hook files (text). Generated internals under .husky/_ stay ignored."

forbidden_outdated_unusable:
  versions:
    - "Any Husky version other than exactly 9.1.7."
  config_and_patterns:
    - 'Legacy v4 JSON config in package.json ("husky": { "hooks": ... }) — removed; use .husky/* files.' # official migration
    - "Using deprecated env vars: HUSKY_GIT_PARAMS (use $1, $2...), HUSKY_SKIP_HOOKS/HUSKY_SKIP_INSTALL (use HUSKY)." # official migration
    - "Placing hook files with invalid names (e.g., 'precommit', 'pre-commit.sh'). Use exact Git hook names." # official
  structure:
    - "Presence of /src or /pages (App Router must be rooted at /app)."

validation_matrix_ci_targets:
  package_json_exact_pins:
    - "husky == 9.1.7 (devDependency or dependency as you prefer)"
    - "next == 15.4.6"
    - "react == 19.1.1"
    - "react-dom == 19.1.1"
    - "typescript == 5.9.2"
    - "tailwindcss == 4.1.1"
    - "@tailwindcss/postcss == 4.1.1"
    - "No '^', '~', 'x', or '*' in any version string"
  scripts_presence:
    - "scripts.prepare == 'husky' OR (for Yarn projects) scripts.postinstall == 'husky'"
  tsconfig_invariants:
    - "target == ES2024; jsx == preserve; strict == true; verbatimModuleSyntax == true; noUncheckedSideEffectImports == true"
  filesystem:
    - "app/layout.tsx contains <html> and <body>"
    - ".husky/ directory exists; at least one hook file (pre-commit) exists"
  hook_integrity:
    - "Hook files are executable in Git (init sets this); contain at least one command."


// ===== FILE: c:\Users\eastm\Desktop\nsbs0820\.github\sourceoftruth\lucide-react_0_539_0.yaml =====

spec:
  name: lucide-react-0.539.0-ssot
  purpose: "Authoritative rules for using lucide-react 0.539.0 in a Next.js App Router project with TS 5.9.2 (ES2024) and React 19.1.1"
  last_verified: "2025-08-15"

versions:
  lucide-react: "0.539.0" # EXACT — no ranges
  next: "15.4.6" # EXACT — App Router only (no /src, no /pages)
  react: "19.1.1" # EXACT
  react-dom: "19.1.1" # EXACT
  typescript: "5.9.2" # EXACT
  tailwindcss: "4.1.1" # EXACT
  "@tailwindcss/postcss": "4.1.1" # EXACT

install:
  npm:
    - "npm i --save-exact lucide-react@0.539.0"
    - "npm i --save-exact next@15.4.6 react@19.1.1 react-dom@19.1.1"
    - "npm i -D --save-exact typescript@5.9.2"
    - "npm i -D --save-exact tailwindcss@4.1.1 @tailwindcss/postcss@4.1.1"
  verify:
    - 'node -e "console.log(require(''lucide-react/package.json'').version)"  # must print 0.539.0'

tsconfig_contract:
  file: "tsconfig.json"
  required.compilerOptions:
    target: "ES2024"
    lib: ["ES2024", "DOM", "DOM.Iterable"]
    jsx: "preserve"
    module: "ESNext"
    moduleResolution: "Bundler"
    strict: true
    verbatimModuleSyntax: true
    noUncheckedSideEffectImports: true
    forceConsistentCasingInFileNames: true
    skipLibCheck: false
    noEmit: true
  invariants:
    - "jsx MUST be 'preserve' (Next controls JSX transform)."
    - "target MUST be 'ES2024'."

project_layout_contract:
  must_exist: ["/app/layout.tsx", "/app/page.tsx", "/app/globals.css", "/postcss.config.mjs"]
  must_not_exist: ["/src", "/pages"]
  css_setup:
    globals_css_first_line: '@import "tailwindcss";'
  postcss:
    plugins: ["@tailwindcss/postcss"]

lucide-react_usage:
  import_patterns:
    allowed:
      - "Named import per icon (tree-shakeable): import { Camera, House } from 'lucide-react';"
      - "Dynamic by name for CMS-driven UIs: import { DynamicIcon } from 'lucide-react/dynamic'; <DynamicIcon name='camera'/>"
      - "Custom/lab icons via <Icon iconNode={...}/> from 'lucide-react' when needed."
    forbidden:
      - "Wildcard import that pulls the entire module: import * as Icons from 'lucide-react';"
      - "Using the vanilla 'lucide' package inside React components (that’s for DOM injection, not React)."
      - "Importing every icon at once (e.g., 'icons' map from 'lucide'); defeats tree-shaking."
  props_contract: # Defaults & semantics defined by lucide-react
    size:
      type: "number"
      default: 24
      notes: "Width/height in px. Can also size with CSS (className, w-*/h-*)."
    color:
      type: "string"
      default: "currentColor"
      notes: "Inherits from parent text color; pass color prop to override."
    strokeWidth:
      type: "number"
      default: 2
      notes: "SVG stroke width; relative to size unless absoluteStrokeWidth=true."
    absoluteStrokeWidth:
      type: "boolean"
      default: false
      notes: "Keeps on-screen stroke width constant when size changes."
    svg_attributes:
      accepts_all_svg_presentation_attributes: true
  accessibility_best_practices:
    - "Do NOT put aria-labels on the icon component when it’s inside a button/link; label the interactive wrapper (or include visually hidden text) instead."
    - "Use visible labels next to icons where feasible; don’t rely on color alone; keep adequate contrast; minimum hit target ~44×44px for icon buttons."
  tailwind_usage:
    - "Prefer className for sizing with Tailwind (e.g., 'w-6 h-6 text-zinc-500')."
    - "Remember color inherits via currentColor; set text color on a parent or the icon."
  dynamic_icons:
    recommended:
      component: "DynamicIcon (from 'lucide-react/dynamic')"
      note: "Use for dynamic name strings (e.g., CMS); import specific icons for static cases."
  types:
    recommended_types:
      - "Use the exported 'LucideProps' to type custom icon wrappers."
      - "Icon components are forwardRef exotic components over <svg>."
  filled_icons:
    policy:
      - "Fills are not officially part of the design system; you may set fill and strokeWidth={0} when appropriate (e.g., stars)."
  global_styling:
    class_name: "All icons include class='lucide' — can be targeted by CSS."
    absolute_stroke_css: "To enforce absolute strokes globally: .lucide * { vector-effect: non-scaling-stroke }"

allowed_examples:
  direct_import_tree_shaking: |
    // Server or Client component OK
    import { Camera } from 'lucide-react';

    export default function Hero(): JSX.Element {
      return <Camera className="w-10 h-10 text-zinc-700" strokeWidth={1.5} />;
    }
  dynamic_icon_by_name: |
    // Client component (dynamic icon name at runtime)
    'use client';
    import { DynamicIcon } from 'lucide-react/dynamic';

    export function MenuIcon({ name }: { name: string }): JSX.Element {
      return <DynamicIcon name={name} size={20} absoluteStrokeWidth />;
    }
  custom_or_lab_icon: |
    import { Icon } from 'lucide-react';
    import { coconut } from '@lucide/lab';

    export function Coconut(): JSX.Element {
      return <Icon iconNode={coconut} className="w-6 h-6" />;
    }
  accessibility_button: |
    import { X } from 'lucide-react';

    export function CloseButton(): JSX.Element {
      return (
        <button className="btn-icon" type="button">
          <X aria-hidden="true" focusable="false" />
          <span className="sr-only">Close dialog</span>
        </button>
      );
    }

forbidden_outdated_unusable:
  versions:
    - "Any lucide-react version other than exactly 0.539.0"
    - "Any React/React-DOM other than exactly 19.1.1"
    - "Any TypeScript other than exactly 5.9.2"
    - "Any Tailwind/@tailwindcss/postcss other than exactly 4.1.1"
  patterns:
    - "import * as Icons from 'lucide-react'  # pulls the whole module, harms bundle size"
    - "Using 'lucide' (vanilla DOM) in React components"
    - "Attempting legacy dynamic maps like 'dynamicIconImports' instead of 'lucide-react/dynamic'"
  structure:
    - "Presence of /src/ or /pages/ directories in App Router project"

validation_matrix:
  package_json_exact_pins:
    - "lucide-react == 0.539.0"
    - "react == 19.1.1"
    - "react-dom == 19.1.1"
    - "typescript == 5.9.2"
    - "tailwindcss == 4.1.1"
    - "@tailwindcss/postcss == 4.1.1"
    - "No '^', '~', 'x', '*', or ranges anywhere"
  tsconfig_invariants:
    - "target == ES2024"
    - "jsx == preserve"
    - "strict == true"
    - "verbatimModuleSyntax == true"
    - "noUncheckedSideEffectImports == true"
  filesystem:
    - "app/layout.tsx renders <html> and <body>"
    - "No /src or /pages"
  code_checks:
    - "No wildcard imports from 'lucide-react'"
    - "No imports from 'lucide' package in React components"
    - "Dynamic import uses 'lucide-react/dynamic' where name is runtime-variable"


// ===== FILE: c:\Users\eastm\Desktop\nsbs0820\.github\sourceoftruth\nextjs_15_5_0.yaml =====

name: nextjs
single_source_of_truth: true
version: "15.5.0" # exact; no ranges/carets allowed
package_name: "next"

install:
  pnpm: "pnpm add -E next@15.5.0"
  npm: "npm i --save-exact next@15.5.0"
  yarn: "yarn add --exact next@15.5.0"

stack_invariants:
  node: ">=18.17.0"
  react: "19.1.1"
  react_dom: "19.1.1"
  typescript: "5.9.2"
  tailwindcss: "4.1.1"
  tailwind_postcss_plugin: "@tailwindcss/postcss@4.1.1"

tsconfig_required:
  file: "tsconfig.json"
  compilerOptions:
    target: "ES2024"
    jsx: "preserve"
    strict: true
    moduleResolution: "bundler"
    module: "esnext"
    allowJs: false
    noEmit: true
    incremental: true
  includes:
    - "app/**/*.ts"
    - "app/**/*.tsx"
    - "lib/**/*.ts"
    - "lib/**/*.tsx"
  excludes:
    - "node_modules"
    - ".next"

project_structure_policy:
  layout: "App Router only"
  root_app_directory_required: "app/" # MUST exist at repo root
  forbidden:
    - "src/app/**" # see NOTE above
    - "pages/**" # no Pages Router
    - "pages/api/**"
  allowed:
    - "public/**" # must remain at repo root
    - "app/**"
    - "lib/**"
    - "components/**"

app_router_file_conventions:
  required_root_files:
    - "app/layout.tsx  # must contain <html> and <body>"
    - "app/page.tsx"
    - "app/globals.css"
  optional_special_files:
    - "app/error.tsx"
    - "app/not-found.tsx"
    - "app/loading.tsx"
    - "app/template.tsx"
    - "app/api/**/route.ts"
    - "middleware.ts"
  segment_files:
    page: "page.tsx" # route entry
    layout: "layout.tsx" # wraps children
    route_handler: "route.ts" # REST-like handlers
    metadata:
      object_export: "export const metadata"
      function: "export async function generateMetadata(...)"
  references:
    docs:
      - "App Router overview"
      - "Project structure"
      - "Route Handlers"
      - "Middleware"
      - "Metadata API"

rendering_and_components:
  defaults:
    server_components: true # pages/layouts are Server Components by default
    client_components: "opt-in via 'use client' at top of file"
  allowed:
    - "Server Actions via 'use server' in server functions"
    - "Client components can call Server Actions"
  forbidden:
    - "getServerSideProps / getStaticProps / getInitialProps (Pages Router APIs)"
    - "next/head in App Router (use Metadata API)"
  references:
    - "Server Actions"
    - "App Router migration: replace GSSP/GSP with new APIs"
    - "Metadata API (object or generateMetadata)"

data_fetching_and_cache:
  server_fetch:
    api: "next extends global fetch"
    options:
      cache: ["force-cache", "no-store"]
      next:
        revalidate: "number (seconds)"
        tags: "string[]"
    examples:
      static: "await fetch(url, { cache: 'force-cache' })"
      revalidate: "await fetch(url, { next: { revalidate: 60 } })"
      no_store: "await fetch(url, { cache: 'no-store' })"
  revalidation:
    functions:
      - "revalidatePath"
      - "revalidateTag"
  guidance:
    - "Prefer server fetches inside Server Components"
    - "Tag responses you plan to invalidate"
  references:
    - "fetch API (App Router)"
    - "Caching & Revalidating guide"

route_handlers:
  file: "app/**/route.ts"
  runtime: "Web Fetch API (Request/Response)"
  methods: ["GET", "POST", "PUT", "PATCH", "DELETE", "HEAD", "OPTIONS"]
  must_return: "Response (do not call NextResponse.next() here)"
  notes:
    - "Use Route Handlers instead of pages/api"
  references:
    - "route.ts API"
    - "Error: NextResponse.next() not allowed in App Route Handler"

middleware:
  file: "middleware.ts"
  behavior: "Runs before routes; modify, redirect, rewrite"
  uses: "Authentication gates, localization, header transforms"
  references:
    - "Middleware docs"

css_and_tailwind_v4:
  postcss_config:
    file: "postcss.config.mjs"
    content: "export default { plugins: { '@tailwindcss/postcss': {} } };"
  globals_css:
    first_line: "@import 'tailwindcss';"
  component_styles: "CSS Modules or other; avoid global leakage"

next_config_invariants:
  file: "next.config.ts"
  recommended:
    reactStrictMode: true
    eslint:
      ignoreDuringBuilds: false
    typescript:
      ignoreBuildErrors: false
  allow:
    experimental: {} # avoid enabling unstable flags unless justified

images_fonts_links:
  next_image: "Use <Image> for optimized images; domain whitelisting in next.config.ts if remote"
  next_font: "Use @next/font (automatic) or link tags"
  next_link: "Use <Link> for client nav; prefetching is automatic"

allowed_examples:
  server_page_example: |
    // app/page.tsx
    import type { Metadata } from 'next';

    export const metadata: Metadata = { title: 'Home' };

    async function getData(): Promise<{ msg: string }> {
      const res = await fetch('https://api.example.com', { next: { revalidate: 60 } });
      if (!res.ok) throw new Error('Failed');
      return res.json() as Promise<{ msg: string }>;
    }

    export default async function Page(): Promise<JSX.Element> {
      const data = await getData();
      return <main>{data.msg}</main>;
    }
  route_handler_example: |
    // app/api/hello/route.ts
    export async function GET(): Promise<Response> {
      return Response.json({ hello: 'world' });
    }

forbidden_and_replacements:
  - pattern: "pages/** or pages/api/**"
    reason: "Pages Router APIs not allowed in this repo"
    replacement: "Move to App Router and Route Handlers under app/api/**/route.ts"
    docs: "App Router docs"
  - pattern: "getServerSideProps / getStaticProps / getInitialProps"
    reason: "Replaced by server fetch + new data APIs"
    replacement: "Fetch in Server Components; use revalidate & tags"
    docs: "Migration guide"
  - pattern: "import Head from 'next/head'"
    reason: "App Router uses Metadata API"
    replacement: "export const metadata or generateMetadata"
    docs: "Metadata API"
  - pattern: "NextResponse.next() inside app/**/route.ts"
    reason: "Route Handlers must return Response"
    replacement: "Return Response (e.g., Response.json(...))"
    docs: "Error message doc"
  - pattern: "Client components doing privileged server work"
    reason: "Security & bundle size"
    replacement: "Server Actions or Route Handlers"
  - pattern: "Placing app/ under src/"
    reason: "Forbidden by repo policy"
    replacement: "Keep app/ at repository root"

version_pinning_and_engines:
  package_json_must_include:
    - '"next": "15.5.0"'
    - '"react": "19.1.1"'
    - '"react-dom": "19.1.1"'
    - '"typescript": "5.9.2"'
    - '"tailwindcss": "4.1.1"'
    - '"@tailwindcss/postcss": "4.1.1"'
  disallow_version_ranges: true
  engines:
    node: "18.17.0"
    pnpm: "9.0.0"

compliance_checklist:
  - "app/layout.tsx exists and defines <html> and <body>"
  - "app/page.tsx exists (default route)"
  - "No pages/**"
  - "No src/app/**"
  - "Metadata uses object or generateMetadata"
  - "Route Handlers return Response"
  - "fetch uses cache/no-store/revalidate with tags where needed"
  - "tsconfig target ES2024, jsx preserve, strict true"


// ===== FILE: c:\Users\eastm\Desktop\nsbs0820\.github\sourceoftruth\react_and_react-dom_19_1_1.yaml =====

name: react-react-dom-ssot
version: 1.0.0
scope: production
summary: >
  Single source of truth for React 19.1.1 + react-dom 19.1.1 usage in a Next.js App Router
  project (no /src), with TypeScript 5.9.2 (strict), target ES2024, JSX preserve, and Tailwind 4.1.1.

stack_constraints:
  typescript:
    allowed: ["5.9.2"]
    tsconfig:
      compilerOptions:
        target: ES2024
        module: ESNext
        moduleResolution: bundler
        lib: ["ES2024", "DOM", "DOM.Iterable"]
        jsx: preserve
        strict: true
        noUncheckedIndexedAccess: true
        exactOptionalPropertyTypes: true
        noImplicitOverride: true
        noImplicitReturns: true
        noFallthroughCasesInSwitch: true
  nextjs:
    version: "15.4.6"
    app_router_only: true
    src_directory: forbidden # project root uses /app, not /src
  tailwind:
    version: "4.1.1"
    postcss_plugin: "@tailwindcss/postcss@4.1.1"
    integration:
      - add "globals.css" and import it in app/layout.tsx
      - prefer component-level styles via Tailwind utilities; co-locate any additional CSS as needed
        using React 19 stylesheet components with precedence (see react-dom components below)
  react:
    version: "19.1.1" # exact; no ^ or ~
  react_dom:
    version: "19.1.1" # exact; no ^ or ~
  package_manager:
    enforce_exact_versions: true # use --save-exact; never use ^ or ~

install:
  npm:
    - npm i --save-exact react@19.1.1 react-dom@19.1.1
    - npm i --save-exact typescript@5.9.2
    - npm i --save-exact tailwindcss@4.1.1 @tailwindcss/postcss@4.1.1
    # Types for TS 5.9.2 projects using React 19:
    - npm i --save-exact @types/react@19.1.x @types/react-dom@19.1.x # pin exact when chosen

runtime_model:
  rendering:
    client_root_api: react-dom/client.createRoot
    ssr_hydration_api: react-dom/client.hydrateRoot
    error_hooks:
      # Root options to implement error reporting:
      onUncaughtError: allowed
      onCaughtError: allowed
      onRecoverableError: allowed
    strict_mode: recommended_dev_only
    transitions:
      async_in_transitions: allowed # supports async functions in transitions
  server_components:
    status: stable_with_frameworks
    default_in_next_app_router: true
    directives:
      use_server: for Server Functions only
      use_client: mark client components explicitly
  document_metadata_and_assets:
    components:
      - title # always hoisted to <head>
      - meta # hoisted to <head>
      - link # supports precedence for stylesheets
      - style # supports href + precedence; can be hoisted
      - script # supports async hoisting semantics
    stylesheet_ordering:
      precedence_required_for_stylesheets: true
      deduplication:
        automatic_by_href: true
    resource_hints_and_preloads:
      prefetchDNS: allowed
      preconnect: allowed
      preload: allowed
      preloadModule: allowed
      preinit: allowed
      preinitModule: allowed

allowed_apis_and_syntax:
  core_hooks:
    - useState
    - useReducer
    - useEffect
    - useLayoutEffect
    - useMemo
    - useCallback
    - useRef # TS 5.9 types require an argument; pass undefined for empty refs
    - useId
    - useTransition
    - useDeferredValue
    - useSyncExternalStore
  new_or_updated_in_19:
    - use # for awaiting thenables in components/hooks (prefer async/await in RSC)
    - useOptimistic
    - useActionState # returns [state, formAction, isPending]
  react_dom_hooks:
    - useFormStatus # form pending/error state within the nearest <form>
  forms_and_actions:
    action_attribute_on_form: allowed
    button_formAction_prop: allowed
    server_functions_with_actions: allowed # 'use server' in function body or file
    requestFormReset: allowed
  refs:
    ref_as_prop:
      allowed: true
      recommendation: "Prefer ref-as-prop for new code; continue to support forwardRef for libs."
      typing_guidance:
        function_component_with_ref:
          # Example typing pattern for intrinsic elements:
          - "type InputProps = React.ComponentPropsWithRef<'input'>"
          - "function TextInput(props: InputProps) { const {ref, ...rest} = props; return <input ref={ref} {...rest} /> }"
        custom_component_ref:
          - "type MyCompProps = { ref?: React.Ref<HTMLDivElement>; ... }"
    forwardRef: allowed_for_compat
  portals_and_sync:
    - createPortal
    - flushSync
  server_rendering_apis:
    note: "Framework (Next.js) handles react-dom/server; direct usage generally not needed."
    apis: [renderToPipeableStream, renderToReadableStream, renderToStaticMarkup, renderToString]
  dom_components_with_special_behavior:
    title:
      hoisted: true
      single_title_recommended: true
    meta:
      hoisted: true
    link:
      stylesheet_precedence_prop_required: true
      deduplication_by_href: true
    style:
      supports_href_and_precedence: true
      can_suspend_while_loading: true
    script:
      hoistable_with_async_true: true
      caveats: ["Async scripts must be safe to reorder/hoist."]
  keys_and_lists:
    stable_keys_required: true
    index_keys:
      allowed: discouraged
      note: "Only use as last resort for static, non-reordered lists."
  jsx_transform:
    requirement: "Modern JSX transform is required in React 19"
    tsconfig_jsx: preserve
    bundler:
      next_swc_handles_transform: true

forbidden_outdated_removed:
  # Removals / hard deprecations in React 19:
  react_package:
    - "propTypes runtime checks removed; usage is ignored"
    - "defaultProps on function components removed (use ES default params)"
    - "legacy context via contextTypes/getChildContext removed"
    - "string refs removed (use callback refs or createRef)"
    - "module pattern factories removed"
    - "React.createFactory removed (use JSX)"
  react_dom_package:
    - "ReactDOM.render removed (use createRoot)"
    - "ReactDOM.hydrate removed (use hydrateRoot)"
    - "ReactDOM.unmountComponentAtNode removed (use root.unmount())"
    - "react-test-renderer/shallow removed; use react-shallow-renderer directly"
    - "UMD builds removed; do not load react/react-dom via UMD script tags"
  patterns_to_avoid:
    - "Using third-party head managers (e.g. react-helmet) for title/meta when React 19 components suffice"
    - "Mutating DOM outside React (findDOMNode) except in legacy escape-hatch cases"
    - "Outdated JSX transform requiring explicit React import at top of every file"
    - "Class component legacy lifecycles without UNSAFE_ prefixes"
    - "Implicit return values in ref callback (TS now rejects non-void returns)"
  nextjs_specific_prohibitions:
    - "No /src directory; app router only"
    - "Do not use Pages Router APIs"
    - "Do not import or rely on UMD builds of React in Next"

typescript_5_9_specifics_for_react_19:
  useRef_requires_argument:
    rule: "Always call useRef with an explicit initial value (e.g., undefined)."
  ref_callback_return_type:
    rule: "Ref callbacks must return void or a cleanup function; avoid implicit value returns."
  default_props:
    rule: "Use ES default parameters instead of defaultProps for function components."
  typing_ref_as_prop_examples:
    intrinsic_example: |
      type ButtonProps = React.ComponentPropsWithRef<'button'>
      export function Button(p: ButtonProps) { const { ref, ...rest } = p; return <button ref={ref} {...rest} /> }
    custom_ref_example: |
      export type PanelProps = { ref?: React.Ref<HTMLDivElement>; children?: React.ReactNode }
      export function Panel({ ref, children }: PanelProps) { return <div ref={ref}>{children}</div> }
  eslint_rules_recommended:
    - react/jsx-no-constructed-context-values
    - react-hooks/rules-of-hooks
    - react-hooks/exhaustive-deps
    - "@typescript-eslint/no-misused-promises"
    - "@typescript-eslint/await-thenable"

react_forms_best_practices_19:
  progressive_enhancement:
    - "Use <form action={serverFn}> with Server Functions where appropriate."
    - "Prefer <button formAction={wrappedAction}> with useActionState when client state from action result is needed."
  hooks:
    useFormStatus:
      usage: "Read pending/submission state inside the nearest form."
    useActionState:
      signature: "[state, formAction, isPending] = useActionState(fn, initialState, permalink?)"
      notes:
        - "Wrapped action receives (prevState, ...usualArgs)."
        - "Works before hydration in RSC-enabled frameworks (e.g., Next App Router)."
  resets:
    requestFormReset: "Programmatic reset supported."

resource_loading_performance:
  use_when_framework_does_not_handle:
    prefetchDNS: "Hint DNS for expected hosts."
    preconnect: "Open early connections."
    preload: "Fetch critical fonts/CSS/images/scripts early."
    preloadModule: "Fetch ESM modules early."
    preinit: "Initialize external scripts/styles with attributes (e.g., as='script')."
    preinitModule: "Initialize ESM modules early."
  notes:
    - "Next often handles many hints; use these APIs for hotspots where you measure wins."

error_handling_and_reporting:
  root_options:
    onUncaughtError: "Errors not caught by Error Boundaries."
    onCaughtError: "Errors caught by Error Boundaries."
    onRecoverableError: "Recoverable warnings/errors (e.g., hydration mismatches)."
  reporting_strategy:
    - "Wire these options at createRoot/hydrateRoot to forward errors to your reporter."
    - "React 19 no longer re-throws render errors; rely on the above callbacks."

accessibility_and_semantics:
  links_and_navigation:
    - "Use semantic <a> for navigation; in Next, prefer next/link."
  titles_and_meta:
    - "Use <title> with a single string child; only one active at a time."
  forms:
    - "Use native labels and ARIA attributes; let React 19 form APIs manage state/pending UX."

ci_enforcement_and_checks:
  package_json:
    engines:
      node: ">=18.18.0"
    policy:
      - "All dependencies pinned exactly (no ^ or ~)."
  lint:
    - "Enable react-hooks plugin and TypeScript ESLint strict recommended."
  static_checks:
    forbid_patterns:
      - "ReactDOM.render("
      - "ReactDOM.hydrate("
      - "unmountComponentAtNode("
      - ".propTypes"
      - ".defaultProps" # for function components
      - "createFactory("
      - "ref: '"
  type_checks:
    - "CI must run tsc --noEmit with TS 5.9.2."

migration_notes_from_18_x:
  required_actions:
    - "Replace ReactDOM.render -> createRoot(...).render"
    - "Replace ReactDOM.hydrate -> hydrateRoot"
    - "Replace unmountComponentAtNode -> root.unmount()"
    - "Remove function-component defaultProps; convert to default params"
    - "Remove string refs; use callback refs or createRef"
    - "Migrate legacy context to createContext/contextType/provider/consumer"
    - "Ensure modern JSX transform is enabled by the toolchain (Next handles this)"
  optional_actions_but_recommended:
    - "Adopt document metadata components (<title>, <meta>, <link>, <style>, <script>)"
    - "Adopt resource hinting (prefetchDNS/preconnect/preload/preinit) for measured bottlenecks"
    - "Adopt useActionState/useFormStatus where server-driven forms benefit UX"


// ===== FILE: c:\Users\eastm\Desktop\nsbs0820\.github\sourceoftruth\resend_6_0_1.yaml =====

name: resend
single_source_of_truth: true
version: "6.0.1" # exact; no caret/range allowed
package_name: "resend"
install:
  pnpm: "pnpm add -E resend@6.0.1"
  npm: "npm i --save-exact resend@6.0.1"
  yarn: "yarn add --exact resend@6.0.1"

stack_invariants:
  node: ">=18.17.0"
  typescript: "5.9.2" # strict mode on
  tsconfig:
    compilerOptions:
      target: "ES2024"
      jsx: "preserve"
      strict: true
  react: "19.1.1"
  react_dom: "19.1.1"
  nextjs_app_router:
    next: "15.4.7"
    layout: "app/**" # no src/ directory
    pages_dir: false
  tailwind:
    tailwindcss: "4.1.1"
    postcss_plugin: "@tailwindcss/postcss@4.1.1"

env:
  required:
    - "RESEND_API_KEY" # never exposed client-side
  optional:
    - "RESEND_REGION" # if multi-region is configured (dashboard)
  domain_verification_required: true # sending from your domain requires verification in Resend dashboard

sdk_basics:
  import_and_client:
    allowed:
      - "import { Resend } from 'resend';"
      - "const resend = new Resend(process.env.RESEND_API_KEY!);"
    server_only: true # never construct/use Resend in the browser or client components
  http_base_url: "https://api.resend.com"
  esm_first: true # prefer ESM import; CommonJS require discouraged in this stack
  idempotency:
    description: "Prevent duplicates by supplying an idempotency key."
    node_usage: "await resend.emails.send(payload, { idempotencyKey: 'entity/unique-id' });"
    constraints:
      unique_per_request: true
      ttl_hours: 24
      max_length: 256
    headers:
      rate_limit_headers:
        - ratelimit-limit
        - ratelimit-remaining
        - ratelimit-reset
        - retry-after

rate_limits_and_quotas:
  api_default_rps: 2 # requests/second by default
  guidance:
    - "Queue, throttle, or batch to respect RPS (e.g., job queue)."
  send_limits:
    to_cc_bcc_max_recipients_per_single_send: 50
  batch:
    max_items_per_call: 100

types_and_fields:
  send_email_node:
    method: "resend.emails.send(payload[, options])"
    payload_fields:
      from: "string  # 'Name <sender@yourdomain.com>'"
      to: "string | string[]  # max 50"
      subject: "string"
      html: "string  # optional if using text or react"
      text: "string  # optional"
      react: "ReactElement  # optional; template rendered server-side"
      cc: "string | string[]  # optional"
      bcc: "string | string[]  # optional"
      replyTo: "string | string[]  # optional"
      headers: "Record<string,string>  # optional; custom email headers"
      tags: "Array<{ name: string; value: string }>"
      attachments: "Array<{ filename: string; content?: string|Buffer; path?: string; content_type?: string; content_id?: string }>"
      scheduledAt: "string  # natural language ('in 1 hour') or ISO 8601; scheduling constraints apply"
    options_fields:
      idempotencyKey: "string (<=256 chars)"
  batch_send_node:
    method: "resend.batch.send(items[, options])"
    items: "Array<send_email_node.payload>  # same payload subset, with limitations"
    options_fields:
      idempotencyKey: "string"
  retrieve_email:
    method: "resend.emails.get(id)"
  update_email:
    method: "resend.emails.update({ id, scheduledAt })"
  cancel_email:
    method: "resend.emails.cancel(id)"

constraints_and_limitations:
  scheduling:
    supported_field: "scheduledAt"
    can_schedule_up_to_days: 30
    not_supported_with:
      - "attachments"
      - "batch_send"
      - "SMTP"
  attachments:
    max_total_message_size_mb_after_base64: 40
    unsupported_with:
      - "batch_send"
      - "scheduledAt"
    inline_images:
      use_cid: true
      steps:
        - "Set <img src='cid:my-image-id'> in HTML"
        - "Provide matching attachment with content_id: 'my-image-id'"
  tags:
    format: "ASCII letters/numbers/underscore/dash; <= 256 chars"
  camelCase_vs_snake_case:
    note: "Node SDK uses camelCase (e.g., replyTo, scheduledAt); REST payloads may use snake_case."

nextjs_app_router_reference_impls:
  simple_route_send:
    path: "app/api/email/route.ts"
    code: |
      import 'server-only';
      import { Resend } from 'resend';
      import { NextRequest } from 'next/server';

      const resend = new Resend(process.env.RESEND_API_KEY!);

      export async function POST(req: NextRequest) {
        try {
          const body = (await req.json()) as {
            to: string | string[];
            subject: string;
            html?: string;
            text?: string;
            cc?: string | string[];
            bcc?: string | string[];
            replyTo?: string | string[];
            idempotencyKey?: string;
          };

          const { data, error } = await resend.emails.send(
            {
              from: 'NSBS <noreply@yourdomain.com>',
              to: body.to,
              subject: body.subject,
              html: body.html,
              text: body.text,
              cc: body.cc,
              bcc: body.bcc,
              replyTo: body.replyTo,
            },
            body.idempotencyKey ? { idempotencyKey: body.idempotencyKey } : undefined
          );

          if (error) {
            return new Response(JSON.stringify({ error }), { status: 500 });
          }
          return new Response(JSON.stringify({ data }), { status: 200 });
        } catch (e) {
          return new Response(JSON.stringify({ error: String(e) }), { status: 500 });
        }
      }
  react_email_template_send:
    note: "Server-render a React Email component and pass via `react:`."
    code: |
      import 'server-only';
      import { Resend } from 'resend';
      import { EmailTemplate } from '@/app/components/email/EmailTemplate'; // React component (tsx)
      const resend = new Resend(process.env.RESEND_API_KEY!);

      export async function POST() {
        const { data, error } = await resend.emails.send({
          from: 'NSBS <noreply@yourdomain.com>',
          to: ['user@example.com'],
          subject: 'Welcome!',
          react: EmailTemplate({ firstName: 'Luccas' }),
        });
        if (error) throw error;
        return Response.json({ data });
      }
  schedule_email:
    note: "Use `scheduledAt` with natural language or ISO 8601. Not with attachments or batch."
    code: |
      await resend.emails.send({
        from: 'NSBS <noreply@yourdomain.com>',
        to: ['user@example.com'],
        subject: 'Reminder',
        html: '<p>See you soon</p>',
        scheduledAt: 'tomorrow 9am PST',
      });

  batch_send:
    note: "Up to 100 items; each item must respect single-send limits. No attachments; no scheduling."
    code: |
      await resend.batch.send(
        [
          { from: 'NSBS <noreply@yourdomain.com>', to: ['a@example.com'], subject: 'Hi', html: '<p>Hi A</p>' },
          { from: 'NSBS <noreply@yourdomain.com>', to: ['b@example.com'], subject: 'Hi', html: '<p>Hi B</p>' },
        ],
        { idempotencyKey: 'digest/2025-08-23' }
      );

attachments_reference:
  remote_file: |
    await resend.emails.send({
      from: 'NSBS <noreply@yourdomain.com>',
      to: 'user@example.com',
      subject: 'Report',
      html: '<p>Attached</p>',
      attachments: [{ path: 'https://example.com/report.pdf', filename: 'report.pdf' }],
    });
  local_base64: |
    import { readFileSync } from 'node:fs';
    const content = readFileSync('/path/to/file.pdf').toString('base64');
    await resend.emails.send({
      from: 'NSBS <noreply@yourdomain.com>',
      to: 'user@example.com',
      subject: 'Report',
      html: '<p>Attached</p>',
      attachments: [{ filename: 'file.pdf', content }],
    });
  inline_image_cid: |
    await resend.emails.send({
      from: 'NSBS <noreply@yourdomain.com>',
      to: 'user@example.com',
      subject: 'Logo',
      html: '<img src="cid:logo-image">',
      attachments: [{ path: 'https://resend.com/static/sample/logo.png', filename: 'logo.png', content_id: 'logo-image' }],
    });

error_handling_and_retries:
  api_error_code_429: "Back off per ratelimit-headers; queue and retry with jitter."
  duplicate_prevention: "Use idempotencyKey; Resend deduplicates within 24h."
  delivery_issues:
    common:
      - "Unverified domain (fix in dashboard)."
      - "Sandbox/Free account recipient restrictions."
    observability: "Inspect delivery events & logs in Resend dashboard."

forbidden_and_replacements:
  - pattern: "Client-side SDK usage (e.g., in files marked with 'use client')"
    reason: "API key exposure; SDK is server-side."
    replacement: "Move all Resend calls to server (route handlers, server actions, or server utilities)."
  - pattern: "Snake_case fields in Node SDK payload (e.g., reply_*to*, scheduled_*at*)"
    reason: "Node SDK expects camelCase."
    replacement: "Use replyTo, scheduledAt, etc."
  - pattern: "Using `attachments` with batch sending"
    reason: "Batch endpoint does not support attachments."
    replacement: "Use single sends or drop attachments."
  - pattern: "Using `scheduledAt` with attachments or batch"
    reason: "Scheduling not supported with attachments or batch."
    replacement: "Remove attachments or send individually; or remove scheduling."
  - pattern: "Exceeding 50 recipients in `to/cc/bcc` for a single send"
    reason: "Documented limit."
    replacement: "Split recipients across multiple sends or use batch (without attachments/scheduling)."
  - pattern: "Lack of idempotency on retryable flows"
    reason: "Risk duplicate emails."
    replacement: "Provide options.idempotencyKey per request."
  - pattern: "CommonJS require('resend') in this stack"
    reason: "ESM-first Next.js App Router; consistency."
    replacement: "import { Resend } from 'resend';"
  - pattern: "Using Pages Router (`pages/api/*`) for new endpoints in this repo"
    reason: "Project standard is App Router only."
    replacement: "Create `app/api/<name>/route.ts`."

validation_with_zod_4_0_17:
  example: |
    import { z } from 'zod';
    export const EmailRequest = z.object({
      to: z.union([z.string().email(), z.array(z.string().email()).nonempty()]),
      subject: z.string().min(1),
      html: z.string().optional(),
      text: z.string().optional(),
      cc: z.union([z.string().email(), z.array(z.string().email())]).optional(),
      bcc: z.union([z.string().email(), z.array(z.string().email())]).optional(),
      replyTo: z.union([z.string().email(), z.array(z.string().email())]).optional(),
      idempotencyKey: z.string().max(256).optional(),
    }).refine(v => Boolean(v.html || v.text), { message: "Provide html or text" });

compliance_checks:
  version_pinning:
    package_json_must_contain:
      - '"resend": "6.0.1"'
  directory_policy:
    must_have:
      - "app/api/**"
    must_not_have:
      - "src/app/**"
      - "pages/api/**  # new code"


// ===== FILE: c:\Users\eastm\Desktop\nsbs0820\.github\sourceoftruth\stripe.yaml =====

spec:
  name: stripe-one-time-only-ssot
  purpose: "Authoritative, zero-variance rules for Stripe one-time payments in Next.js App Router"
  last_verified: "2025-08-15"

versions:
  stripe: "18.4.0" # EXACT — no ^, ~, ranges, or “Vx”
  "@stripe/react-stripe-js": "3.9.0" # EXACT
  "@stripe/stripe-js": "7.8.0" # EXACT (browser loader required by React Stripe.js)
  next: "15.4.6" # EXACT
  react: "19.1.1" # EXACT
  react-dom: "19.1.1" # EXACT
  typescript: "5.9.2" # EXACT
  tailwindcss: "4.1.1" # EXACT
  "@tailwindcss/postcss": "4.1.1" # EXACT

constraints:
  payments_scope: "One-time payments only (NO subscriptions of any kind)."
  project_layout:
    root: "/app" # App Router only
    forbid: ["/src", "/pages"] # must not exist
  tsconfig.required.compilerOptions:
    target: "ES2024"
    lib: ["ES2024", "DOM", "DOM.Iterable"]
    jsx: "preserve"
    module: "ESNext"
    moduleResolution: "Bundler"
    strict: true
    verbatimModuleSyntax: true
    noUncheckedSideEffectImports: true
    forceConsistentCasingInFileNames: true
    skipLibCheck: false
    noEmit: true

install_and_verify:
  npm_install:
    - "npm i --save-exact stripe@18.4.0 @stripe/react-stripe-js@3.9.0 @stripe/stripe-js@7.8.0"
    - "npm i --save-exact next@15.4.6 react@19.1.1 react-dom@19.1.1"
    - "npm i -D --save-exact typescript@5.9.2 tailwindcss@4.1.1 @tailwindcss/postcss@4.1.1"
  verify_versions:
    - 'node -e "console.log(require(''stripe/package.json'').version)"             # 18.4.0'
    - 'node -e "console.log(require(''@stripe/react-stripe-js/package.json'').version)"  # 3.9.0'
    - 'node -e "console.log(require(''@stripe/stripe-js/package.json'').version)" # 7.8.0'

stripe_js_loading_policy:
  requirement:
    - "Load Stripe.js from js.stripe.com (PCI). `@stripe/stripe-js` inserts the script or uses an existing one."
  allowed_imports:
    - "import {loadStripe} from '@stripe/stripe-js';"
    - "import {Elements, PaymentElement, useStripe, useElements} from '@stripe/react-stripe-js';"
  notes:
    - "Keep Stripe.js available site-wide for fraud signals if needed (see @stripe/stripe-js guidance)."

server_sdk_usage (stripe@18.4.0):
  init:
    - "import Stripe from 'stripe';"
    - "const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, { apiVersion: '2024-06-20' });  # pin your API version in Dashboard"
  one_time_flow_only:
    api: "Payment Intents"
    steps:
      - "Create PaymentIntent on the server (amount/ currency/ metadata)."
      - "Return client_secret to the client."
      - "Confirm on client with Payment Element or card Element."
  forbidden_apis:
    - "Subscriptions API (subscriptions, subscription_schedules)"
    - "Checkout Session with mode='subscription'"
    - "Billing Portal"
    - "Prices with 'recurring' objects for this project"
  webhook_notes:
    - "For one-time payments, handle `payment_intent.succeeded` and `payment_intent.payment_failed`."
    - "Use Stripe-Signature verification on webhooks."

next_app_router_integration:
  must_have_files:
    - "/app/layout.tsx" # contains <html> and <body>
    - "/app/page.tsx"
    - "/app/globals.css" # begins with: @import "tailwindcss";
    - "/postcss.config.mjs" # plugin: "@tailwindcss/postcss"
    - "/app/api/stripe/create-payment-intent/route.ts"
  server_action_or_route_handler:
    recommendation: "Use Route Handler (app/**/route.ts) to create PaymentIntents."
  example_route_handler: |
    // app/api/stripe/create-payment-intent/route.ts
    import Stripe from 'stripe';

    export async function POST(req: Request): Promise<Response> {
      const { amount, currency = 'usd' } = await req.json() as { amount: number; currency?: string };

      const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, { apiVersion: '2024-06-20' });

      // Minimum server-side validation
      if (!Number.isInteger(amount) || amount <= 0) {
        return new Response(JSON.stringify({ error: 'Invalid amount' }), { status: 400 });
      }

      const pi = await stripe.paymentIntents.create({
        amount,
        currency,
        automatic_payment_methods: { enabled: true },
        metadata: { purpose: 'one_time' }
      });

      return Response.json({ clientSecret: pi.client_secret });
    }

react_client_example (Elements + PaymentElement, one-time):
  notes:
    - "Place <Elements> high in the tree of a Client Component. Use PaymentElement for many payment methods."
  code: |
    // app/(checkout)/checkout/page.tsx  (Client Component)
    'use client';
    import { useEffect, useMemo, useState } from 'react';
    import { loadStripe } from '@stripe/stripe-js';
    import { Elements, PaymentElement, useElements, useStripe } from '@stripe/react-stripe-js';

    const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!);

    function CheckoutForm(): JSX.Element {
      const stripe = useStripe();
      const elements = useElements();
      const [message, setMessage] = useState<string>('');
      const [isLoading, setLoading] = useState(false);

      const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!stripe || !elements) return;

        setLoading(true);
        const { error } = await stripe.confirmPayment({
          elements,
          confirmParams: { return_url: `${window.location.origin}/thank-you` },
          redirect: 'if_required'
        });

        if (error) setMessage(error.message ?? 'Payment failed');
        else setMessage('Payment processing…');
        setLoading(false);
      };

      return (
        <form onSubmit={handleSubmit} className="space-y-4">
          <PaymentElement />
          <button disabled={!stripe || isLoading} className="px-4 py-2 rounded bg-black text-white">
            {isLoading ? 'Processing…' : 'Pay now'}
          </button>
          {message && <p role="status">{message}</p>}
        </form>
      );
    }

    export default function CheckoutPage(): JSX.Element {
      const [clientSecret, setClientSecret] = useState<string>('');

      useEffect(() => {
        void fetch('/api/stripe/create-payment-intent', { method: 'POST', body: JSON.stringify({ amount: 1999, currency: 'usd' }) })
          .then(r => r.json()).then(d => setClientSecret(d.clientSecret));
      }, []);

      const options = useMemo(() => ({ clientSecret }), [clientSecret]);

      if (!clientSecret) return <p>Loading…</p>;

      return (
        <Elements stripe={stripePromise} options={options}>
          <CheckoutForm />
        </Elements>
      );
    }

tailwind_v4_requirements:
  postcss.config.mjs: |
    export default { plugins: { "@tailwindcss/postcss": {} } };
  app/globals.css: |
    @import "tailwindcss";

security_and_best_practices:
  - "Never expose STRIPE_SECRET_KEY to the browser."
  - "Validate amounts server-side; do not trust client amounts."
  - "Prefer Payment Element for multi-method support; use Automatic Payment Methods."
  - "Use webhooks to mark orders paid; don’t trust client confirmation callbacks alone."
  - "Load Stripe.js from js.stripe.com (React loader does this for you)."

forbidden_outdated_unusable:
  versions:
    - "Any package versions other than exactly those pinned above."
  patterns:
    - "Any use of Subscriptions API (e.g., stripe.subscriptions.*, subscription_schedules.*)."
    - "Checkout Session with { mode: 'subscription' }."
    - "Prices with { recurring: ... }."
    - "Billing Portal (stripe.billingPortal.*)."
    - "Client-side creation of PaymentIntent (must be server-side)."
  structure:
    - "Presence of /src or /pages in this App Router project."


// ===== FILE: c:\Users\eastm\Desktop\nsbs0820\.github\sourceoftruth\supabase.yaml =====

spec:
  name: supabase-ssr-next-locked
  purpose: "Authoritative rules for Supabase in Next.js App Router using @supabase/ssr 0.6.1 and @supabase/supabase-js 2.55.0 — with exactly two roles: user | admin"
  last_verified: "2025-08-15"

versions:
  "@supabase/ssr": "0.6.1" # EXACT — no ^, ~, ranges, or “Vx”
  "@supabase/supabase-js": "2.55.0" # EXACT
  next: "15.4.6" # EXACT (App Router; no /src, no /pages)
  react: "19.1.1" # EXACT
  react-dom: "19.1.1" # EXACT
  typescript: "5.9.2" # EXACT
  tailwindcss: "4.1.1" # EXACT
  "@tailwindcss/postcss": "4.1.1" # EXACT

install_and_verify:
  npm_install:
    - "npm i --save-exact @supabase/ssr@0.6.1 @supabase/supabase-js@2.55.0"
    - "npm i --save-exact next@15.4.6 react@19.1.1 react-dom@19.1.1"
    - "npm i -D --save-exact typescript@5.9.2 tailwindcss@4.1.1 @tailwindcss/postcss@4.1.1"
  verify_versions:
    - 'node -e "console.log(require(''@supabase/ssr/package.json'').version)"      # 0.6.1'
    - 'node -e "console.log(require(''@supabase/supabase-js/package.json'').version)" # 2.55.0'

tsconfig_contract:
  file: "tsconfig.json"
  compilerOptions:
    target: "ES2024"
    lib: ["ES2024", "DOM", "DOM.Iterable"]
    jsx: "preserve"
    module: "ESNext"
    moduleResolution: "Bundler"
    strict: true
    verbatimModuleSyntax: true
    noUncheckedSideEffectImports: true
    forceConsistentCasingInFileNames: true
    skipLibCheck: false
    noEmit: true
  invariants:
    - "jsx MUST be 'preserve' (Next controls JSX transform)."
    - "target MUST be 'ES2024'."

project_layout_contract:
  must_exist:
    [
      "/app/layout.tsx",
      "/app/page.tsx",
      "/app/globals.css",
      "/postcss.config.mjs",
      "/utils/supabase/client.ts",
      "/utils/supabase/server.ts",
    ]
  must_not_exist: ["/src", "/pages"]
  css_setup:
    globals_css_first_line: '@import "tailwindcss";'
  postcss:
    plugins: ["@tailwindcss/postcss"]

env_contract:
  required_public:
    - "NEXT_PUBLIC_SUPABASE_URL"
    - "NEXT_PUBLIC_SUPABASE_ANON_KEY"
  required_server_secret:
    - "SUPABASE_SERVICE_ROLE_KEY  # server-only; NEVER shipped to the client"
  notes:
    - "Use cookie-based auth for SSR; tokens are stored in secure cookies via @supabase/ssr utilities." # doc refs

client_factory_patterns:
  files:
    - path: "/utils/supabase/client.ts"
      contents: |
        import { createBrowserClient } from '@supabase/ssr';

        export function createClient() {
          return createBrowserClient(
            process.env.NEXT_PUBLIC_SUPABASE_URL!,
            process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
          );
        }
    - path: "/utils/supabase/server.ts"
      contents: |
        import { cookies, headers } from 'next/headers';
        import { createServerClient } from '@supabase/ssr';

        export async function createClient() {
          // Call cookies() / headers() BEFORE creating the client to opt out of caching for auth-bound fetches
          // (required by Next App Router auth patterns)
          const cookieStore = await cookies();
          const headerList = await headers();

          return createServerClient(
            process.env.NEXT_PUBLIC_SUPABASE_URL!,
            process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
            {
              cookies: {
                get: (name: string) => cookieStore.get(name)?.value,
                set: (name: string, value: string, options: { path?: string; domain?: string; sameSite?: "lax"|"strict"|"none"; expires?: Date; httpOnly?: boolean; secure?: boolean }) => {
                  cookieStore.set({ name, value, ...options });
                },
                remove: (name: string, options: { path?: string; domain?: string }) => {
                  cookieStore.delete({ name, ...options });
                },
              },
              // Optional: forward X-Forwarded-* when behind a proxy/CDN
              headers: {
                get: (name: string) => headerList.get(name) ?? undefined,
              },
            }
          );
        }
  rules:
    - "Use createBrowserClient ONLY in Client Components."
    - "Use createServerClient ONLY in Server Components / Server Actions / Route Handlers."
    - "Call cookies()/headers() before any Supabase call in server paths to opt out of Next cache for authenticated requests." # doc refs

middleware_contract:
  file: "/middleware.ts"
  purpose:
    - "Refresh expired auth tokens and write cookies since Server Components cannot write cookies directly."
    - "Pass refreshed tokens to server and browser (request.cookies.set + response.cookies.set)."
  must:
    - "Use updateSession helper (pattern per docs) and a matcher that excludes static assets & images."
  cautions:
    - "Never trust getSession() in server code; use getUser() to revalidate tokens on every protected request." # doc refs

minimal_usage_examples:
  server_component_guard: |
    // app/private/page.tsx
    import { redirect } from 'next/navigation';
    import { createClient } from '@/utils/supabase/server';

    export default async function PrivatePage(): Promise<JSX.Element> {
      const supabase = await createClient();
      const { data, error } = await supabase.auth.getUser();
      if (error || !data?.user) redirect('/login');
      return <p>Hello {data.user.email}</p>;
    }
  server_action_auth: |
    // app/login/actions.ts
    'use server';
    import { createClient } from '@/utils/supabase/server';

    export async function login(_: unknown, formData: FormData): Promise<{ok: boolean}> {
      const supabase = await createClient();
      const email = String(formData.get('email') ?? '');
      const password = String(formData.get('password') ?? '');
      const { error } = await supabase.auth.signInWithPassword({ email, password });
      if (error) throw error;
      return { ok: true };
    }
  client_component_usage: |
    // app/_components/Profile.tsx
    'use client';
    import { useEffect, useState } from 'react';
    import { createClient } from '@/utils/supabase/client';

    export default function Profile(): JSX.Element {
      const [email, setEmail] = useState<string>('');
      useEffect(() => {
        const supabase = createClient();
        void supabase.auth.getUser().then(({ data }) => setEmail(data.user?.email ?? ''));
      }, []);
      return <span>{email}</span>;
    }

database_roles_and_policies:
  # Application-level roles are LIMITED to exactly two: 'user' and 'admin'.
  enum_and_users:
    sql: |
      -- One-time: a tight enum for app roles
      create type app_role as enum ('user','admin');

      -- Example users table (if you keep roles in DB as well)
      create table if not exists public.app_users (
        id uuid primary key references auth.users(id) on delete cascade,
        role app_role not null default 'user',
        created_at timestamptz not null default now()
      );

  jwt_claims_strategy:
    approach: "Custom Access Token Hook to stamp role into the JWT as 'user_role'"
    notes:
      - "Hook runs before token issuance and adds claims; RLS reads claims via auth.jwt()." # doc refs
      - "Do NOT rely on user_metadata for RLS — users can modify it; use custom claim or DB join." # doc refs
    pseudo_config: |
      -- In Supabase Dashboard → Authentication → Hooks → Custom access token
      -- Pseudocode the hook returns: { user_role: 'user' | 'admin' }
      -- Ensure the claim key matches your policies (e.g., 'user_role').

  rls_policy_examples:
    enable_rls: |
      alter table public.app_users enable row level security;
    policy_user_self:
      sql: |
        create policy "read own row"
        on public.app_users
        for select
        using (
          auth.uid() = id
        );
    policy_admin_read_all:
      sql: |
        create policy "admin read all"
        on public.app_users
        for select
        using (
          coalesce(auth.jwt()->>'user_role','user') = 'admin'
        );
    policy_admin_update_roles:
      sql: |
        create policy "admin update roles"
        on public.app_users
        for update
        using (coalesce(auth.jwt()->>'user_role','user') = 'admin');

  invariants:
    - "JWT claim key used in policies MUST be a custom access token claim (e.g., user_role) or a secure server-derived value."
    - "Only 'user' and 'admin' are permitted app roles everywhere (DB, JWT, UI)."

security_and_best_practices:
  must:
    - "Use cookie-based auth for SSR; never rely on localStorage on the server path." # doc refs
    - "Never expose SUPABASE_SERVICE_ROLE_KEY to the browser (server-side only)." # doc refs
    - "Protect pages with supabase.auth.getUser() (revalidates token), not getSession(), in server code." # doc refs
    - "Prefer Row Level Security + policies keyed off auth.uid() and specific JWT claims."
  avoid:
    - "Deprecated '@supabase/auth-helpers-nextjs' — replaced by '@supabase/ssr'." # doc refs
    - "Using createBrowserClient in server paths, or createServerClient in client components."
    - "Trusting user_metadata in RLS; it’s user-modifiable." # doc refs

forbidden_outdated_unusable:
  versions:
    - "Any @supabase/ssr other than exactly 0.6.1"
    - "Any @supabase/supabase-js other than exactly 2.55.0"
    - "Any TS/Next/React/Tailwind versions other than those pinned above"
  patterns:
    - "Use of '@supabase/auth-helpers-*' packages (legacy)"
    - "LocalStorage token handling for SSR paths"
    - "Service role key in any client bundle or Client Component"
    - "Any application role besides 'user' or 'admin' in DB/JWT/UI"
  structure:
    - "Presence of /src or /pages (App Router must be rooted at /app)"

validation_matrix:
  package_json_exact_pins:
    - "@supabase/ssr == 0.6.1"
    - "@supabase/supabase-js == 2.55.0"
    - "next == 15.4.6"
    - "react == 19.1.1"
    - "react-dom == 19.1.1"
    - "typescript == 5.9.2"
    - "tailwindcss == 4.1.1"
    - "@tailwindcss/postcss == 4.1.1"
    - "No '^', '~', 'x', '*', or ranges anywhere"
  tsconfig_invariants:
    - "target == ES2024"
    - "jsx == preserve"
    - "strict == true"
    - "verbatimModuleSyntax == true"
    - "noUncheckedSideEffectImports == true"
  filesystem:
    - "app/layout.tsx renders <html> and <body>"
    - "No /src or /pages"
  code_checks:
    - "No imports from '@supabase/auth-helpers-*'"
    - "Server code uses createServerClient; client code uses createBrowserClient"
    - "Middleware present and updates session"
    - "No references to SUPABASE_SERVICE_ROLE_KEY in client bundles"
  rls_checks:
    - "Only 'user'|'admin' roles appear in SQL migrations and JWT claims"
    - "Policies reference auth.jwt()->>'user_role' or auth.uid()"


// ===== FILE: c:\Users\eastm\Desktop\nsbs0820\.github\sourceoftruth\tailwind-merge_3_3_1.yaml =====

name: tailwind-merge
version: "3.3.1" # exact, no ranges
scope: "JS/TS runtime utility for resolving Tailwind CSS class conflicts"
supported_tailwind_versions:
  exact_range: ">=4.0.0 <4.2.0"
  notes: |
    The library explicitly supports Tailwind CSS v4.0–v4.1. Use tailwind-merge v2.6.x if you ever target Tailwind v3.
    (Your project targets Tailwind 4.1.x — ✅ compatible.) :contentReference[oaicite:1]{index=1}

sources:
  npm: "tailwind-merge@3.3.1"   # install via pnpm add tailwind-merge@3.3.1 -E
  repository: "https://github.com/dcastil/tailwind-merge" # docs/readme + release notes (v3 line) :contentReference[oaicite:2]{index=2}

installation:
  pnpm: "pnpm add tailwind-merge@3.3.1 -E"
  npm:  "npm i tailwind-merge@3.3.1 --save-exact"
  yarn: "yarn add tailwind-merge@3.3.1 --exact"

purpose_and_behavior:
  what_it_does: |
    Produces a single, conflict-free Tailwind class string where the “last conflicting class wins”, following Tailwind’s rules
    for variants/modifiers. Non-conflicting classes are preserved. Results are cached for perf. :contentReference[oaicite:3]{index=3}
  critical_guarantees:
    - Conflict resolution across the same “class group” (e.g., spacing, bg, text, etc.). Last occurrence wins. :contentReference[oaicite:4]{index=4}
    - Fully typed; zero runtime deps; modern Node/browsers supported. :contentReference[oaicite:5]{index=5}
    - Tracks Tailwind v4 spec details more strictly than v2 line (per v3 release). :contentReference[oaicite:6]{index=6}

api_surface_v3_3_1:
  # The package exports these stable entry points in the v3 line
  functions:
    - name: twMerge
      signature_ts: |
        // TS 5.9.2
        declare function twMerge(...classLists: string[]): string;
      correct_usage: |
        Pass a single composed string (often from clsx) or multiple strings. Use with clsx to handle conditionals/arrays/objects,
        then resolve conflicts with twMerge.
      example: |
        import { twMerge } from 'tailwind-merge';
        const final = twMerge('p-2 bg-red-500', 'p-4 bg-[#B91C1C]'); // 'p-4 bg-[#B91C1C]'
        // combine with clsx (2.1.1):
        import clsx from 'clsx';
        const cn = (...inputs: ClassValue[]) => twMerge(clsx(...inputs));
        // cn('p-2', { 'p-4': true }, ['text-sm', false]) -> 'p-4 text-sm'
      refs: ["npm readme quickstart"] # :contentReference[oaicite:7]{index=7}
    - name: extendTailwindMerge
      signature_ts: |
        // Adds to default config (class groups / theme / conflicting groups)
        declare function extendTailwindMerge<TIdsExtended = string>(
          configExtension: Partial<TwMergeUserConfig<TIdsExtended>>
        ): typeof twMerge;
      purpose: |
        Teach tailwind-merge about custom utilities or extended theme tokens so it can continue resolving conflicts correctly.
      example_minimal: |
        import { extendTailwindMerge } from 'tailwind-merge';
        export const twm = extendTailwindMerge({
          extend: {
            classGroups: {
              // treat your custom utilities as a resolvable group
              'text-shadow-size': [{ 'text-shadow': ['', 'sm','md','lg','xl','2xl','3xl','none'] }],
            },
          },
        });
      refs: ["docs: configuration / class groups & recipes"] # :contentReference[oaicite:8]{index=8}
    - name: createTailwindMerge
      signature_ts: |
        // Build a fully custom twMerge using your own config generator
        declare function createTailwindMerge(
          configFactory: () => TwMergeCompleteConfig
        ): typeof twMerge;
      purpose: "Use when you want to replace the default config entirely (tree-shake defaults)."
      refs: ["docs: configuration / API reference"] # :contentReference[oaicite:9]{index=9}
  config_shapes_core_concepts:
    class_groups: |
      Arrays (and nested “prefix maps”) of mutually exclusive utilities that target the same CSS property.
      Example: one of 'p-2' | 'p-3' | 'p-4' survives; others in the group are removed. :contentReference[oaicite:10]{index=10}
    conflicting_class_groups: |
      Explicit cross-group conflicts (e.g., setting that X conflicts with Y) when default rules aren’t enough. :contentReference[oaicite:11]{index=11}
    theme_mapping: |
      Map Tailwind v4 theme variable namespaces to validators so arbitrary/theme values (like colors, spacing) are recognized. :contentReference[oaicite:12]{index=12}
  tailwind_v4_specifics_v3_line:
    breaking_from_v2_line:
      - "Drops Tailwind v3 support; v3.x is Tailwind v4-only." :contentReference[oaicite:13]{index=13}
      - "Prefix rules changed to match v4; do not include the hyphen in custom prefix in config." :contentReference[oaicite:14]{index=14}
      - "Custom separators are no longer supported." :contentReference[oaicite:15]{index=15}
      - "Order-sensitive modifiers are formalized; config requires 'orderSensitiveModifiers' when building custom configs." :contentReference[oaicite:16]{index=16}
      - "Removed legacy validator isLength; use number/fraction validators in v3 config (handled internally by defaults)." :contentReference[oaicite:17]{index=17}

allowed_usage_patterns:
  - "Use twMerge for final conflict resolution; compose with clsx@2.1.1 (as your stack dictates) to handle arrays/objects/conditionals."
  - "Create a single project helper (cn) that does: twMerge(clsx(...inputs))."
  - "Extend config (extendTailwindMerge) whenever you introduce custom utilities (plugins or arbitrary patterns) that might conflict."
  - "Safe with responsive, state, and arbitrary variants per Tailwind v4 spec (e.g., 'md:p-4', 'hover:bg-red-500', '[&_*]:p-2')." :contentReference[oaicite:18]{index=18}
  - "Works with Tailwind 4.1.x, which your project uses." :contentReference[oaicite:19]{index=19}

forbidden_outdated_unusable:
  - "Do NOT use tailwind-merge v2.x with Tailwind v4 (mismatch). Use v3.x only." :contentReference[oaicite:20]{index=20}
  - "Do NOT rely on tailwind-merge to understand your custom utilities unless you extend the config; unknown classes won’t conflict correctly." :contentReference[oaicite:21]{index=21}
  - "Do NOT pass objects/arrays directly to twMerge for conditionals — twMerge expects strings. Use clsx (or similar) first."
  - "Do NOT configure custom separators (unsupported in v3)." :contentReference[oaicite:22]{index=22}
  - "Do NOT include a leading '-' in custom prefix configuration; the v3 line changed prefix semantics." :contentReference[oaicite:23]{index=23}
  - "Do NOT depend on classes removed in Tailwind v4; tailwind-merge v3 won’t support them." :contentReference[oaicite:24]{index=24}
  - "Avoid ambiguous 'fake Tailwind' class names that look like real utilities; merging may produce unexpected removals." :contentReference[oaicite:25]{index=25}

type_safe_helper_canonical:
  file: "app/lib/cn.ts"
  ts_strict: true
  code: |
    // TS 5.9.2, ES2024 target
    import { twMerge } from 'tailwind-merge';
    import type { ClassValue } from 'clsx';
    import clsx from 'clsx';

    // Single source of truth for class composition + conflict resolution
    export function cn(...inputs: ClassValue[]): string {
      return twMerge(clsx(...inputs));
    }

common_recipes:
  merge_default_with_prop:
    code: |
      // Button.tsx
      import { cn } from '@/app/lib/cn';

      export function Button(props: { className?: string; disabled?: boolean; children: React.ReactNode }) {
        return (
          <button
            className={cn(
              // base
              'inline-flex items-center justify-center rounded-xl px-4 py-2 text-sm font-medium',
              // variants
              props.disabled ? 'opacity-50 cursor-not-allowed' : 'hover:shadow-sm',
              // overrides
              props.className
            )}
            disabled={props.disabled}
          >
            {props.children}
          </button>
        );
      }
  extend_for_custom_utilities:
    note: "Teach tw-merge your custom plugin utilities so the 'last one wins' rule applies correctly."
    code: |
      // app/lib/tw-merge.ts
      import { extendTailwindMerge } from 'tailwind-merge';

      // Example: custom 'text-shadow-*' utility with sizes & colors
      export const twm = extendTailwindMerge({
        extend: {
          classGroups: {
            'text-shadow-size': [{ 'text-shadow': ['', 'sm', 'md', 'lg', 'xl', '2xl', '3xl', 'none'] }],
            'text-shadow-color': [{ 'text-shadow': ['black', 'white', 'transparent'] }],
          },
          // Optionally specify explicit conflicts between those two groups
          conflictingClassGroups: {
            'text-shadow-size': ['text-shadow-color'],
            'text-shadow-color': ['text-shadow-size'],
          },
        },
      });

      // then use: twm('text-shadow-sm', 'text-shadow-lg') -> 'text-shadow-lg'

edge_cases_and_limits:
  notes:
    - "Arbitrary values with labels should follow Tailwind v4 syntax; v3 supports arbitrary CSS variable syntax and important modifier position."
    - "Classes that only *look* like Tailwind utilities can be dropped/kept unexpectedly; keep them clearly distinct or extend config." :contentReference[oaicite:26]{index=26}
    - "When you radically customize theme tokens, review whether default theme validators still recognize your values; extend config if needed." :contentReference[oaicite:27]{index=27}

integration_with_stack:
  next_react_ts:
    next: "15.4.7 (app/ router, no 'src/' per your standard)"
    react: "19.1.1"
    typescript: "5.9.2 (strict)"
    tailwind: "4.1.x"
    usage: "No special Next config needed; use 'cn' helper across all components, server and client."
  file_conventions:
    helper_location: "app/lib/cn.ts"
    import_style: "Always import and use `cn` for className composition; disallow raw string concatenation."

ci_and_lint_enforcement:
  eslint_config_patch:
    file: "eslint.local.cjs"
    code: |
      // Load in eslint.config.mjs via `import('./eslint.local.cjs')` and spread the overrides.
      module.exports = {
        rules: {
          // Enforce our helper instead of string concatenation for className
          'no-restricted-syntax': [
            'error',
            {
              selector:
                "JSXAttribute[name.name='className'] > Literal", // className="literal"
              message:
                "Use cn(...) (clsx + twMerge) instead of raw string literals for className. This ensures conflict resolution.",
            },
            {
              selector:
                "JSXAttribute[name.name='className'] JSXExpressionContainer > BinaryExpression[operator='+']",
              message:
                "Do not concatenate className strings. Use cn(...) helper (clsx + twMerge).",
            },
          ],
          // Disallow classnames package — standardize on clsx 2.1.1
          'no-restricted-imports': [
            'error',
            { paths: [{ name: 'classnames', message: 'Use clsx + twMerge (cn helper) instead.' }] },
          ],
        },
        overrides: [
          {
            files: ['**/*.{ts,tsx,jsx}'],
            rules: {
              // Encourage cn(...) usage by flagging suspicious long literals
              'max-len': ['warn', { code: 140, ignoreTemplateLiterals: true, ignoreStrings: false }],
            },
          },
        ],
      };
  ci_regex_guards:
    - name: "forbid_tailwind_merge_v2_or_unpinned"
      description: "Ensure exact 3.3.1 is installed"
      regex: '\"tailwind-merge\"\\s*:\\s*\"(?!3\\.3\\.1\")'
      paths: ["package.json"]
      action_on_match: "fail"
    - name: "detect_raw_classname_concat"
      description: "Catch string concatenation of className"
      regex: "className=\\{[^}]*\\+[^}]*\\}"
      paths: ["**/*.tsx", "**/*.jsx"]
      action_on_match: "warn"
    - name: "detect_literal_classname"
      description: "Discourage hard-coded className literals that may mask conflicts"
      regex: "className=\\\"[^\\{][^\"]+\\\""
      paths: ["**/*.tsx", "**/*.jsx"]
      action_on_match: "warn"
  precommit_example:
    file: ".husky/pre-commit"
    code: |
      #!/usr/bin/env sh
      . "$(dirname "$0")/_/husky.sh"
      pnpm exec eslint . --ext .ts,.tsx
      # CI-style grep checks
      if grep -R --exclude-dir=node_modules -P '"tailwind-merge"\s*:\s*"(?!3\.3\.1")' package.json; then
        echo "ERROR: tailwind-merge must be pinned to 3.3.1"; exit 1; fi
      if grep -R --exclude-dir=node_modules -E 'className=\{[^}]*\+[^}]*\}' -- '**/*.tsx' '**/*.jsx'; then
        echo "WARN: Found className concatenation. Prefer cn(...)."; fi

verification_snippets:
  # quick sanity checks to keep nearby
  basics: |
    import { twMerge } from 'tailwind-merge';
    twMerge('p-2 p-4');                 // 'p-4'
    twMerge('p-3 px-5');                // 'p-3 px-5' (refinement kept)
    twMerge('bg-red-500', 'bg-[#B91C1C]'); // 'bg-[#B91C1C]' (arbitrary last wins) :contentReference[oaicite:28]{index=28}

migration_and_versioning_notes:
  from_v2_to_v3:
    - "Upgrade Tailwind to v4.x first, then adopt tailwind-merge v3.x." :contentReference[oaicite:29]{index=29}
    - "Recheck any custom config (class groups, theme keys). v3 mirrors Tailwind v4 namespaces; some v2 validators were removed." :contentReference[oaicite:30]{index=30}
    - "If you previously relied on custom separators or v3-era prefix positions, remove/update — unsupported in v3." :contentReference[oaicite:31]{index=31}


// ===== FILE: c:\Users\eastm\Desktop\nsbs0820\.github\sourceoftruth\tsdoc.md =====

# TSDoc Requirement Checklist (TypeScript 5.9.2)

Use this checklist to standardize TSDoc across a TypeScript 5.9.2 codebase. It
focuses on enforceable conventions, minimum documentation coverage, and
compatibility with popular tooling such as API Extractor and TypeDoc.

## Scope and Goals

- Align doc comments with TSDoc standard (not raw JSDoc).
- Ensure API surfaces are discoverable, accurate, and tool-friendly.
- Avoid type duplication in comments—leverage the TypeScript types.

## Global Requirements

- Use /\*_ … _/ TSDoc block comments above declarations (no // line comments for
  API docs).
- Write concise, developer-oriented docs; avoid restating types already clear
  from signatures.
- Keep comments language-neutral, present tense, and imperative for commands.
- Prefer Markdown inline formatting where allowed (code spans, lists, links) and
  keep it restrained.

## Project Configuration

- Enable strict type-checking (recommended): strict true in tsconfig.
- Ensure declaration output for public packages: declaration true or use d.ts
  rollups in build.
- Ensure source-level doc comments are preserved in the emitted declarations.
- Document generation target: choose and configure one:
  - API Extractor (for API review, d.ts rollups, and model JSON)
  - TypeDoc (for HTML/Markdown documentation)

## Coverage Targets

- Public API (exported) must be documented:
  - Packages, namespaces, modules
  - Public classes, interfaces, type aliases, enums
  - Public functions, methods, properties, accessors, constants
- Internal-only or non-exported entities should either be:
  - Documented if significant, or
  - Hidden via @internal or project tooling configuration
- Minimum standards:
  - All exported declarations: summary present
  - All parameters: described
  - All return values: described (unless void/obvious)
  - All thrown errors: described if part of contract
  - All deprecations: annotated and justified

## Comment Structure Requirements

- Start with a one-sentence summary line.
- Optionally follow with a blank line and extended remarks.
- Order of sections:
  1. Summary
  2. Remarks
  3. Example(s)
  4. Parameters
  5. Returns
  6. Throws
  7. See also
  8. Tags (deprecated, internal, beta, sealed, override, etc.)

## Allowed TSDoc Tags (Core)

- @remarks – Longer description beyond summary.
- @example – One or more code examples; use fenced code blocks with language.
- @param name – Description for each parameter; match parameter names exactly.
- @returns – Description of the return value.
- @throws – Specify error types/conditions (document observable contract).
- @see – References to related APIs or docs.
- @defaultValue – For fields with default behavior/values.
- @deprecated – Reason and alternative; include migration guidance.
- @internal – Exclude from public docs; for internal-only APIs.
- @beta or @alpha – Mark stability; ensure tooling recognizes release tags.
- @sealed/@virtual/@override – Behavioral contracts where applicable.

Note: Avoid undocumented custom tags unless tooling is configured to support
them.

## Prohibitions and Pitfalls

- Do not duplicate types in prose (avoid “param x: string” in text).
- Do not include implementation details that can drift from code; focus on
  observable behavior.
- Do not use HTML where Markdown suffices.
- Do not rely on JSDoc-only type syntax; TypeScript types come from signatures,
  not comments.
- Avoid vague summaries like “Helper function” or “Does X”.

## Style Guide Essentials

- Summary: one concise sentence, active voice.
- Parameter descriptions: explain purpose, units, constraints, notable defaults.
- Returns: what is returned, shape/semantics, non-obvious behaviors (e.g., null
  vs empty).
- Throws: documented only for errors that are part of the contract (not
  incidental).
- Examples: runnable or realistic code snippets, minimal imports, show expected
  behavior/output.
- Use code formatting:
  - Inline code with backticks: `likeThis`
  - Fenced blocks: `ts ... `
- Links:
  - Prefer relative references via @see or in Markdown; avoid fragile external
    links where possible.

## API Surface Specifics

### Functions

- Document all parameters via @param.
- Clarify side effects and performance notes in @remarks if relevant.
- Document error modes via @throws.

### Classes

- Class summary describes purpose and key responsibilities.
- Constructor parameters documented; note invariants and required preconditions.
- Methods and accessors documented; note mutability and side effects.
- Properties: include @defaultValue when relevant.

### Interfaces and Type Aliases

- Summarize intent and compatibility expectations.
- For complex shapes, add @remarks explaining important fields/constraints.

### Enums

- Enum summary describes the domain.
- Every member gets a short description; document flags/bitwise semantics if
  applicable.

### Generics and Overloads

- Explain generic type parameters in @remarks (constraints, inference
  expectations).
- For overloads, ensure summaries differentiate when to use each overload.

### Errors and Exceptions

- Prefer typed error results (e.g., discriminated unions) where appropriate.
- If throwing, standardize error classes and document in @throws.

## Stability and Versioning

- Use @beta/@alpha for pre-release APIs.
- Use @deprecated with version and migration path; avoid silent removals.
- Maintain changelogs that cross-reference added/deprecated/removed APIs.

## Examples Standard

- At least one realistic @example for public entry points.
- Ensure examples compile under TypeScript 5.9.2 syntax.
- Prefer deterministic examples; show input and expected output where helpful.

## Internationalization and Accessibility

- Avoid colloquialisms; keep wording clear for non-native speakers.
- Describe units, time zones, encodings, locales when relevant.

## Tooling and Validation

- Lint for doc presence/quality using:
  - ESLint rules for requiring TSDoc on exported members
  - Custom rules for empty summaries, missing @param/@returns
- Validate with chosen doc tool:
  - API Extractor: no undocumented exports; approved API reports
  - TypeDoc: build with zero warnings for unmatched/malformed tags

## Documentation Debt Rules

- New or changed public APIs must include complete TSDoc before merge.
- Failing checks (missing summary/params/returns or malformed tags) block CI.
- Track debt with issues linked to symbols and commit SHA.

## Migration Aids

- For existing JSDoc:
  - Remove type annotations from comments; rely on TS types.
  - Replace non-standard tags with TSDoc equivalents or supported custom tags in
    tooling config.
  - Normalize summaries and parameter descriptions.

## Review Checklist (Per Symbol)

- Summary present and accurate.
- @remarks used for non-trivial behavior.
- All @param present, accurate, and match names.
- @returns present when non-void.
- @throws documented for contractually thrown errors.
- Examples present where beneficial and compile.
- Deprecated/beta/internal tags used correctly.
- No type info duplicated in prose; no stale implementation details.
- Markdown renders cleanly (no broken code fences/links).
- Spelling/grammar passes.

## Sample TSDoc Templates

### Function

/\*\*

- Computes the checksum for a UTF-8 string.
-
- @remarks Uses the CRC32c polynomial. Input is normalized to NFC before
  processing.
-
- @param input - The UTF-8 string to hash.
- @param seed - Optional seed to vary the result; use 0 for the default
  behavior.
- @returns The unsigned 32-bit checksum as a number.
- @throws RangeError - Thrown if the normalized input exceeds the maximum
  allowed length.
-
- @example
- ```ts

  ```

- const sum = crc32c("hello");
- // sum === 0x9AE0DAAF
- ```

  ```

-
- @see normalize _/ export function crc32c(input: string, seed = 0): number { /_
  ... \*/ }

### Class

/\*\*

- A resilient queue with at-least-once delivery.
-
- @remarks Messages are persisted to disk and retried with exponential backoff.
  \*/ export class DurableQueue { /\*\*
  - Enqueues a message for processing.
  -
  - @param message - The JSON-serializable payload.
  - @returns A unique message identifier. _/ enqueue(message: unknown): string {
    /_ ... \*/ } }

### Interface

/\*\*

- Configuration for HTTP client retries.
-
- @remarks Time values are in milliseconds. _/ export interface RetryOptions {
  /\*\* Maximum number of retry attempts. _/ attempts: number; /** Base delay
  before the first retry. \*/ baseDelayMs: number; /** Whether to use jitter to
  randomize backoff intervals. \*/ jitter?: boolean; }

## Maintenance

- Periodically audit public API TSDoc for accuracy after feature changes.
- Keep examples updated with current APIs and runtime behavior.
- Automate CI to fail on undocumented exports or malformed tags.

---

Notes

- This checklist is tailored for TypeScript 5.9.2 syntax and build behavior.
- If a specific documentation generator is mandated, augment this with its
  configuration and tag support matrix.

[1](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-9.html)
[2](https://github.com/microsoft/typescript/releases)
[3](https://devblogs.microsoft.com/typescript/announcing-typescript-5-9/)
[4](https://www.npmjs.com/package/typescript)
[5](https://devblogs.microsoft.com/typescript/)
[6](https://www.youtube.com/watch?v=oH_-6TyxVhI)
[7](https://www.nuget.org/packages/Microsoft.TypeScript.MSBuild/5.9.2)
[8](https://www.youtube.com/watch?v=La56RcRrPIo)
[9](https://marketplace.visualstudio.com/items?itemName=TypeScriptTeam.typescript-592)
[10](https://tsdoc.org)


// ===== FILE: c:\Users\eastm\Desktop\nsbs0820\.github\sourceoftruth\tailwindcss_and_@tailwaindcss_4_1_2.yaml =====

name: tailwindcss-ssot
version: "1.0.0"
scope: "NSBS Platform"
applies_to:
  runtime:
    next: "15.5.0"        # App Router under src/
    react: "19.1.1"
    react-dom: "19.1.1"
    typescript: "5.9.2"   # strict; target es2024; jsx=preserve
    node: ">=18.17.0"
  styling:
    tailwindcss: "4.1.12"
    "@tailwindcss/postcss": "4.1.12"
principles:
  - "CSS-first configuration (no JS config needed); configure in CSS via directives."
  - "Import Tailwind with @import 'tailwindcss'; no @tailwind base/components/utilities in v4."
  - "Use @theme to declare tokens (colors, fonts, breakpoints, spacing)."
  - "Use variants (state, responsive, dark, data/aria, group/peer, structural) via prefixes."
  - "Prefer tokenized utilities; allow arbitrary values with [<value>] and custom-prop shorthand (...-(<custom-property>))."
  - "Detect classes automatically; refine with @source when heuristics miss files; safelist inline."
  - "Avoid v3-only utilities; use official v4 replacements."
project_invariants:
  directory_layout:
    - "App Router lives at src/app/** (no /pages)."
    - "Global stylesheet at src/app/globals.css; layout at src/app/layout.tsx."
  tsconfig.json:
    compilerOptions:
      target: "ES2024"
      jsx: "preserve"
      strict: true
      forceConsistentCasingInFileNames: true
      skipLibCheck: true
      module: "ESNext"
      moduleResolution: "Bundler"
      noUncheckedIndexedAccess: true
      noImplicitOverride: true
      noFallthroughCasesInSwitch: true
      exactOptionalPropertyTypes: true
      isolatedModules: true
    include:
      - "next-env.d.ts"
      - "**/*.ts"
      - "**/*.tsx"
      - ".next/types/**/*.ts"
nextjs_integration:
  files:
    postcss.config.mjs: |
      const config = {
        plugins: {
          "@tailwindcss/postcss": {},
        },
      };
      export default config;
    src/app/globals.css: |
      /* Tailwind v4 import */
      @import "tailwindcss";

      /* (Optional) Add your tokens in @theme. Keep small; app-level tokens preferred.) */
      @theme {
        /* Breakpoints (mobile-first). Values in rem for correct sort order. */
        --breakpoint-sm: 40rem;   /* 640px */
        --breakpoint-md: 48rem;   /* 768px */
        --breakpoint-lg: 64rem;   /* 1024px */
        --breakpoint-xl: 80rem;   /* 1280px */
        --breakpoint-2xl: 96rem;  /* 1536px */

        /* Brand colors (example). */
        --color-brand-50: oklch(97% 0.02 260);
        --color-brand-500: oklch(70% 0.12 260);
        --color-brand-700: oklch(60% 0.12 260);

        /* Fonts, easing, spacing seeds, etc., as needed. */
        --font-sans: ui-sans-serif, system-ui, sans-serif;
      }

      /* (Optional) custom variant; prefer the built-in `dark:` unless you truly need a custom trigger. */
      @custom-variant theme-midnight (&:where([data-theme="midnight"] *));
    src/app/layout.tsx: |
      import type { Metadata } from "next";
      import "./globals.css";

      export const metadata: Metadata = {
        title: "NSBS Platform",
        description: "National Society of Business Sciences Certification Platform",
      };

      export default function RootLayout({ children }: { children: React.ReactNode }) {
        return (
          <html lang="en" suppressHydrationWarning>
            <body className="min-h-dvh bg-white text-gray-900 antialiased dark:bg-zinc-950 dark:text-zinc-100">
              {children}
            </body>
          </html>
        );
      }
  notes:
    - "Prefer the v4 PostCSS plugin `@tailwindcss/postcss`. Autoprefixing and imports are handled; no separate `autoprefixer` or `postcss-import` required."
    - "Use `@source` to include UI packages or unusual file patterns when Tailwind’s auto-detection misses them."
tailwind_v4_directives_and_functions:
  # Source of truth: Functions & Directives reference
  directives:
    - "@import"         # import Tailwind & other CSS
    - "@theme"          # tokens: colors, fonts, breakpoints, spacing, etc.
    - "@source"         # explicit content sources; safelist with inline()
    - "@utility"        # register custom utilities that work with variants
    - "@variant"        # apply an existing variant block-scoped in CSS
    - "@custom-variant" # define custom variant (e.g., alternative dark trigger)
    - "@apply"          # inline existing utilities into authored CSS
    - "@reference"      # reference main stylesheet in SFCs/modules for @apply/@variant
  functions:
    - "--alpha()"       # adjust color opacity at build-time
    - "--spacing()"     # compute spacing from theme at build-time
  compatibility:
    - "@config"         # (legacy) load JS config; CSS-first overrides take precedence
    - "@plugin"         # (legacy) load JS plugins; prefer CSS-first where possible
  deprecations:
    - "theme() function deprecated in v4 — prefer CSS theme variables"
class_detection:
  defaults:
    mode: "automatic"
    ignores:
      - ".gitignore entries are respected (node_modules, .next, coverage, build, etc.)"
  refine_with_source:
    examples:
      - '@source "src/**/*.{ts,tsx,js,jsx,mdx}"'
      - '@source "../packages/ui/**/*.{ts,tsx}"'
      - '@source inline("btn btn-primary btn-secondary") # safelist dynamic strings'
  guidance:
    - "Prefer literal classnames; for dynamic classes use explicit `@source inline()` or map objects with finite keys."
variants_and_prefixing:
  responsive:
    prefixes: ["sm", "md", "lg", "xl", "2xl"]
    rule: "mobile-first (min-width); stackable with state/data/aria variants"
  color_scheme:
    - "dark:"     # built-in dark variant (class or media strategy; use as prefix)
    - "theme-midnight:"  # example from @custom-variant above
  state_and_interaction:
    # See docs for exhaustive list; representative allowed prefixes:
    - "hover:" "focus:" "active:" "visited:" "target:" "focus-visible:" "focus-within:" "disabled:" "enabled:" "checked:" "indeterminate:" "open:" "closed:"
  structural_pseudo:
    - "first:" "last:" "only:" "odd:" "even:" "empty:" "first-of-type:" "last-of-type:" "only-of-type:"
    - "placeholder:" "marker:" "selection:" "first-line:" "first-letter:"
  group_and_peer:
    - "group/* + group-*: e.g., group-hover:, group-focus:, group-open:"
    - "peer/* + peer-*: e.g., peer-checked:, peer-invalid:, peer-open:"
  attribute_driven:
    - "aria-[busy=true]:" "aria-[expanded=false]:" "data-[state=open]:"
    - "has-[selector]:"   # :has() powered variant
  directionality:
    - "rtl:" "ltr:"
  stacking_examples:
    - "dark:md:hover:bg-fuchsia-600"
utility_value_grammar:
  # Patterns you may emit safely across categories (examples; see per-utility docs)
  tokens_and_scales:
    color_tokens: "text-{color}-{50..950}, bg-{color}-{50..950}, border-{color}-{50..950}, etc."
    color_alpha_modifier: "…/{0..100}  (e.g., text-blue-600/75)"
    spacing_scale: "0, px, 0.5, 1, 1.5, 2, … (use --spacing() in CSS as needed)"
    font_sizes: "text-xs..text-9xl; combine with line-height via slash (e.g., text-sm/6)"
    radii: "rounded-none|rounded-xs|rounded-sm|rounded|rounded-md|rounded-lg|rounded-xl|rounded-2xl|rounded-3xl|rounded-full"
    shadows: "shadow-none|shadow-xs|shadow-sm|shadow|shadow-md|shadow-lg|shadow-xl|shadow-2xl"
    blurs: "blur-0|blur-xs|blur-sm|blur|blur-md|blur-lg"
    size_shorthand: "size-*, sets width and height together (e.g., size-16, size-px, size-full)"
  arbitrary_values:
    brackets: "property-[<value>]  e.g., w-[72px], grid-cols-[15], text-[14px]"
    custom_props_short:
      text: "text-(--my-color) == text-[var(--my-color)]"
      max_w: "max-w-(--my-max-width) == max-w-[var(--my-max-width)]"
    calc_and_mix: "allowed inside [<value>] (e.g., py-[calc(--spacing(4)-1px)])"
  examples_safe:
    - 'grid grid-cols-15 gap-4 md:grid-cols-24'
    - 'text-red-600/80 dark:text-sky-400/90'
    - 'data-[state=open]:animate-in aria-[busy=true]:opacity-50'
allowed_utilities_catalog:
  # This section enumerates the official categories you can emit from the LLM.
  # Each key is 1:1 with the Tailwind v4 docs page; all utilities on those pages are allowed.
  layout:
    pages:
      - aspect-ratio
      - columns
      - break-after
      - break-before
      - break-inside
      - box-decoration-break
      - box-sizing
      - display
      - float
      - clear
      - isolation
      - object-fit
      - object-position
      - overflow
      - overscroll-behavior
      - position
      - top / right / bottom / left
      - visibility
      - z-index
  flexbox_and_grid:
    pages:
      - flex-basis
      - flex-direction
      - flex-wrap
      - flex
      - flex-grow
      - flex-shrink
      - order
      - grid-template-columns
      - grid-column
      - grid-template-rows
      - grid-row
      - grid-auto-flow
      - grid-auto-columns
      - grid-auto-rows
      - gap
      - justify-content
      - justify-items
      - justify-self
      - align-content
      - align-items
      - align-self
      - place-content
      - place-items
      - place-self
  spacing:
    pages: [padding, margin]
  sizing:
    pages: [width, min-width, max-width, height, min-height, max-height]
    notes:
      - "Use size-* to set width+height together."
  typography:
    pages:
      - font-family
      - font-size
      - font-smoothing
      - font-style
      - font-weight
      - font-stretch
      - font-variant-numeric
      - letter-spacing
      - line-clamp
      - line-height
      - list-style-image
      - list-style-position
      - list-style-type
      - text-align
      - color
      - text-decoration-line
      - text-decoration-color
      - text-decoration-style
      - text-decoration-thickness
      - text-underline-offset
      - text-transform
      - text-overflow
      - text-wrap
      - text-indent
      - vertical-align
      - white-space
      - word-break
      - overflow-wrap
      - hyphens
      - content
  backgrounds:
    pages:
      - background-attachment
      - background-clip
      - background-color
      - background-image
      - background-origin
      - background-position
      - background-repeat
      - background-size
  borders_and_outlines:
    pages:
      - border-radius
      - border-width
      - border-color
      - border-style
      - outline-width
      - outline-color
      - outline-style
      - outline-offset
  effects:
    pages:
      - box-shadow
      - text-shadow
      - opacity
      - mix-blend-mode
      - background-blend-mode
      - mask-clip
      - mask-composite
      - mask-image
      - mask-mode
      - mask-origin
      - mask-position
      - mask-repeat
      - mask-size
      - mask-type
  filters:
    pages:
      - filter
      - filter-blur
      - filter-brightness
      - filter-contrast
      - filter-drop-shadow
      - filter-grayscale
      - filter-hue-rotate
      - filter-invert
      - filter-saturate
      - filter-sepia
      - backdrop-filter
      - backdrop-filter-blur
      - backdrop-filter-brightness
      - backdrop-filter-contrast
      - backdrop-filter-grayscale
      - backdrop-filter-hue-rotate
      - backdrop-filter-invert
      - backdrop-filter-opacity
      - backdrop-filter-saturate
      - backdrop-filter-sepia
  tables:
    pages: [border-collapse, border-spacing, table-layout, caption-side]
  transitions_and_animation:
    pages:
      - transition-property
      - transition-behavior
      - transition-duration
      - transition-timing-function
      - transition-delay
      - animation
  transforms:
    pages:
      - backface-visibility
      - perspective
      - perspective-origin
      - rotate
      - scale
      - skew
      - transform
      - transform-origin
      - transform-style
      - translate
  interactivity:
    pages:
      - accent-color
      - appearance
      - caret-color
      - color-scheme
      - cursor
      - field-sizing
      - pointer-events
      - resize
      - scroll-behavior
      - scroll-margin
      - scroll-padding
      - scroll-snap-align
      - scroll-snap-stop
      - scroll-snap-type
      - touch-action
      - user-select
      - will-change
  svg:
    pages: [fill, stroke, stroke-width]
  accessibility:
    pages: [forced-color-adjust]
theme_and_colors:
  tokens:
    - "Default palette: slate, gray, zinc, neutral, stone, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose (50..950)."
  customize:
    - "Define custom tokens in @theme; utilities like text-regal-blue are generated from --color-regal-blue."
  opacity:
    - "Use color opacity modifier `/NN` (e.g., text-blue-600/75)."
dark_mode:
  default: "Use built-in `dark:` variant."
  custom_trigger_example: "@custom-variant dark (&:where(.dark, .dark *));"
  usage: "dark:md:hover:bg-fuchsia-600"
best_practices:
  - "Prefer tokens; only use arbitrary values when design requires it."
  - "Constrain dynamic class generation; safelist with @source inline() for runtime strings."
  - "Compose variants sparingly (order: responsive → state)."
  - "Use size-* for square elements (avatars, icons) instead of separate w-/h-."
  - "Preflight is enabled by default via @import 'tailwindcss'; disable only if you fully manage resets."
forbidden_and_migrations:
  do_not_use:
    - "@tailwind base|components|utilities (removed in v4)"
    - "v3-deprecated opacity utilities: bg-opacity-*, text-opacity-*, border-opacity-*, divide-opacity-*, ring-opacity-*, placeholder-opacity-*"
    - "v3 flex aliases: flex-shrink-*, flex-grow-* (use shrink-*, grow-*)"
    - "overflow-ellipsis (use text-ellipsis)"
  renamed_utilities:
    - from: "shadow-sm"
      to: "shadow-xs"
    - from: "shadow"
      to: "shadow-sm"
    - from: "drop-shadow-sm"
      to: "drop-shadow-xs"
    - from: "drop-shadow"
      to: "drop-shadow-sm"
    - from: "blur-sm"
      to: "blur-xs"
    - from: "blur"
      to: "blur-sm"
    - from: "backdrop-blur-sm"
      to: "backdrop-blur-xs"
    - from: "backdrop-blur"
      to: "backdrop-blur-sm"
    - from: "rounded-sm"
      to: "rounded-xs"
    - from: "rounded"
      to: "rounded-sm"
    - from: "outline-none"
      to: "outline-hidden"
    - from: "ring"   # bare
      to: "ring-3"
  config_and_tooling_notes:
    - "JS config `tailwind.config.js` is legacy; prefer CSS-first. `@config` allowed for incremental migration, but avoid new reliance."
    - "PostCSS: use '@tailwindcss/postcss' plugin; do not configure `tailwindcss` directly as a PostCSS plugin in v4."
    - "Remove redundant `autoprefixer`/`postcss-import` unless you have explicit non-Tailwind needs."
validation_snippets:
  disable_preflight_example: |
    /* Only if you intentionally want to disable preflight */
    /* See docs: Preflight → disabling */
    @import "tailwindcss/preflight" layer(base none);
    @import "tailwindcss/utilities";
  add_custom_utility_example: |
    /* Tab size utility that supports hover/focus/lg variants */
    @utility tab-4 { tab-size: 4; }
  custom_variant_example: |
    @custom-variant coffee (&:where([data-theme="coffee"] *));
    /* usage: coffee:text-amber-500 */
references:
  official_docs:
    install: "https://tailwindcss.com/docs/installation"
    next_guide: "https://tailwindcss.com/docs/guides/nextjs"
    editor_setup: "https://tailwindcss.com/docs/editor-setup"
    compatibility: "https://tailwindcss.com/docs/compatibility"
    upgrade_guide: "https://tailwindcss.com/docs/upgrade-guide"
    core_concepts:
      - "https://tailwindcss.com/docs/styling-with-utility-classes"
      - "https://tailwindcss.com/docs/hover-focus-and-other-states"
      - "https://tailwindcss.com/docs/responsive-design"
      - "https://tailwindcss.com/docs/dark-mode"
      - "https://tailwindcss.com/docs/theme"
      - "https://tailwindcss.com/docs/colors"
      - "https://tailwindcss.com/docs/adding-custom-styles"
      - "https://tailwindcss.com/docs/detecting-classes-in-source-files"
      - "https://tailwindcss.com/docs/functions-and-directives"
      - "https://tailwindcss.com/docs/preflight"
    utilities_index: "https://tailwindcss.com/docs/functions-and-directives#(utility-index-on-page)"
  npm_verification:
    tailwindcss: "https://www.npmjs.com/package/tailwindcss/v/4.1.12"
    postcss_plugin: "https://www.npmjs.com/package/@tailwindcss/postcss/v/4.1.12"


// ===== FILE: c:\Users\eastm\Desktop\nsbs0820\.github\sourceoftruth\typescript_5_9_2.yaml =====

# typescript-5.9.2.sot.yaml
meta:
  scope: "TypeScript usage across a Next.js App Router project (no src/), React 19.1.1, Tailwind 4.1.1"
  generated_at: "2025-08-15"
  authoritative_versions:
    typescript: "5.9.2" # exact, no ^ or ~
    next: "15.4.6" # exact, no ^ or ~  (App Router, no src/)
    react: "19.1.1" # exact, no ^ or ~
    react-dom: "19.1.1" # exact, no ^ or ~
    tailwindcss: "4.1.1" # exact, no ^ or ~
    "@tailwindcss/postcss": "4.1.1" # exact, no ^ or ~
  npm_verification:
    # These pages confirm existence/pinning of the above versions.
    typescript_5_9_2: "verified on npm"
    tailwindcss_4_1_1: "verified on npm"
    tailwindcss_postcss_pkg: "verified on npm"

project_structure:
  must_have:
    - "app/layout.tsx  # root layout, must include <html> and <body>"
    - "app/page.tsx    # homepage"
    - "app/global-error.tsx (optional but recommended)"
    - "public/         # static assets"
    - "app/globals.css # Tailwind entry point with @import 'tailwindcss'"
  forbidden:
    - "src/ directory for app router (project must be rooted at /app)"
  notes:
    - "Root layout must include <html> and <body>, and Metadata API should be used for <head>."

packages_json:
  dependencies_exact:
    next: "15.4.6"
    react: "19.1.1"
    react-dom: "19.1.1"
  devDependencies_exact:
    typescript: "5.9.2"
    tailwindcss: "4.1.1"
    "@tailwindcss/postcss": "4.1.1"
  constraints:
    - "No version ranges (^, ~, *, x.x) permitted anywhere."
    - "If Node types are needed, add '@types/node' exact-pin; otherwise prefer DOM/Web APIs."

tsconfig:
  file: "tsconfig.json"
  required.compilerOptions:
    # Target + libs
    target: "ES2024" # supported since TS 5.7; valid in 5.9.2
    lib: ["DOM", "DOM.Iterable", "ES2024"]
    # JSX
    jsx: "preserve" # Next controls JSX transform
    # Modules & resolution
    module: "ESNext" # for Next/bundler (alternative profile: Node20 below)
    moduleResolution: "Bundler"
    moduleDetection: "force" # TS 5.9 default in --init sample
    # Emit & interop
    noEmit: true
    isolatedModules: true
    verbatimModuleSyntax: true # enforce import/export exactness and type-only imports
    allowArbitraryExtensions: false
    # Strictness
    strict: true # implies noImplicitAny, etc.
    noUncheckedIndexedAccess: true
    exactOptionalPropertyTypes: true
    useUnknownInCatchVariables: true
    noFallthroughCasesInSwitch: true
    noImplicitOverride: true
    # Source maps / incremental
    sourceMap: true
    incremental: true
    # Side-effects
    noUncheckedSideEffectImports: true
    # Paths/globs
    forceConsistentCasingInFileNames: true
    skipLibCheck: false
  required.include:
    - "next-env.d.ts"
    - "**/*.ts"
    - "**/*.tsx"
  required.exclude:
    - "node_modules"
    - ".next"
    - "dist"
  alternative_profiles:
    node_runtime_cli:
      compilerOptions:
        module: "Node20" # TS 5.9 added; safe for Node 20 ESM/CJS interop
        moduleResolution: "Node10" # let TS infer Node semantics; adjust only if required
        noEmit: false # if actually emitting for CLI tools
      use_when: "Building server-only Node CLIs/scripts outside Next bundling."
  invariants:
    - "`jsx` MUST remain 'preserve' in Next projects (Next handles the transform)."
    - "`target` MUST be 'ES2024'."
    - "`verbatimModuleSyntax` MUST be enabled (type-only imports/exports are required)."

typing_standards:
  default: "zero-'any' policy (strictly enforced)"
  allowed_substitutions:
    - "Use `unknown` over `any` for untyped values; narrow via refinement."
    - "Use generics or template literal types instead of `any` placeholders."
    - "For third-party gaps, prefer `zod`/runtime validation + inferred types."
  narrowly_permitted_any:
    - "Only at isolated boundary shims (e.g., legacy SDKs), with inline justification comment AND ESLint disable-next-line for that single line."
  must_use:
    - "readonly (params & arrays/tuples) where appropriate"
    - "satisfies operator for narrowing object literals"
    - "const assertions (`as const`) to preserve literal types"
    - "discriminated unions instead of boolean flags"
  prohibited:
    - "Bare `any` in declarations, assertions (`as any`), or casts (`<any>`)."
    - "Implicit `any` (caught by `strict`)."

modules_and_imports:
  allowed:
    - "ESM `import`/`export` exclusively."
    - "`import type` / `export type` for type-only references (enforced by verbatimModuleSyntax)."
    - "Dynamic `import()` for code-splitting or conditional loading."
  required_for_json_modules:
    - "Import **attributes**: `import data from './file.json' with { type: 'json' }`."
  forbidden:
    - "Import **assertions**: `assert { type: 'json' }` (errors under NodeNext/TS ≥5.8)."
    - "`require()` in `.ts`/`.tsx` ESM modules (use dynamic `import()`)."
    - "TS-specific CommonJS forms in ESM (`export =` / `import = require`)."
  notes:
    - "TS 5.9 supports `import defer` (namespace imports only; useful in perf-sensitive cases). Enable only with module modes that preserve ESM semantics."

react_jsx_usage:
  runtime: "React 19.1.1"
  jsx_mode: "preserve (Next-controlled)"
  client_server_split:
    - "Server Components by default; add `'use client'` when needed."
  typing_guidelines:
    - "Type props via exact object types; avoid `React.FC` for children unless needed."
    - "Use `React.ElementType` for polymorphic components."

next_app_router_rules:
  root_layout:
    must_include: ["<html>", "<body>"]
    must_not_include: ["manual <head> tags (use Metadata API)"]
  metadata_api:
    - "Prefer static `export const metadata` or `generateMetadata` in server files."
  caching_revalidation:
    - "Use `revalidatePath`/`revalidateTag` inside Server Actions/Route Handlers only."

tailwind_v4_setup:
  postcss_config_mjs:
    plugins: ["@tailwindcss/postcss"]
  css_entrypoint:
    content: |
      @import "tailwindcss";
  notes:
    - "Tailwind v4 is CSS-first; many customizations live directly in CSS via @theme/@plugin directives."
    - "Do not use `tailwindcss` directly as a PostCSS plugin; use `@tailwindcss/postcss`."
  forbidden:
    - "Old v3 content scanning arrays in JS config (v4 auto-detects)."

allowed_language_features_ts_5_9_2:
  - "Decorators (ECMAScript standard semantics). Avoid legacy `--experimentalDecorators`."
  - "Satisfies operator; const type parameters; template literal types; variadic tuple types; infer improvements."
  - "Top-level await in modules (target ES2024)."
  - "`using` / `Disposable` not standardized—avoid unless runtime supports."

forbidden_or_outdated_in_this_project:
  - "Any usage of `any` without a one-line, justified exception as described."
  - "Import assertions `assert { ... }`."
  - "Legacy decorators mode (`experimentalDecorators: true`) in this Next app."
  - "CommonJS-only patterns (`module.exports`, `require`) in `.ts/.tsx`."
  - "Creating `src/` with an App Router—must be rooted at `/app`."

reference_snippets:
  app/layout.tsx_minimal: |
    // app/layout.tsx
    import type { Metadata } from 'next';

    export const metadata: Metadata = { title: 'App' };

    export default function RootLayout({ children }: { children: React.ReactNode }) {
      return (
        <html lang="en">
          <body>{children}</body>
        </html>
      );
    }
  postcss_config_mjs: |
    // postcss.config.mjs
    export default {
      plugins: ["@tailwindcss/postcss"]
    }
  globals_css: |
    /* app/globals.css */
    @import "tailwindcss";

validation_matrix:
  tsconfig:
    - "target == 'ES2024'"
    - "jsx == 'preserve'"
    - "strict == true"
    - "verbatimModuleSyntax == true"
    - "module in {'ESNext','Node20'} depending on profile"
    - "noUncheckedSideEffectImports == true"
  codebase:
    - "No `assert {` occurrences in imports."
    - "No `: any`, `as any`, or `<any>` outside allowed shims."
    - "Dynamic import used when conditional loading is needed."
  filesystem:
    - "app/layout.tsx exists and renders <html> and <body>."
    - "No /src/ when using App Router."


// ===== FILE: c:\Users\eastm\Desktop\nsbs0820\.github\sourceoftruth\zod_4_0_17.yaml =====

spec:
  name: zod-4.0.17-ssot
  purpose: "Authoritative rules for using Zod 4.0.17 with TypeScript 5.9.2 (ES2024), Next.js App Router (/app only), React 19.1.2, Tailwind 4.1.2"
  last_verified: "2025-08-15"

versions:
  zod: "4.0.17" # EXACT — no ^, ~, ranges, or 'Vx' strings
  typescript: "5.9.2" # EXACT
  next: "15.5.0" # EXACT (App Router; no /src, no /pages)
  react: "19.1.2" # EXACT
  react-dom: "19.1.2" # EXACT
  tailwindcss: "4.1.2" # EXACT
  "@tailwindcss/postcss": "4.1.2" # EXACT

install_and_verify:
  npm_install:
    - "npm i --save-exact zod@4.0.17"
  verification:
    - 'node -e "console.log(require(''zod/package.json'').version)"  # must print 4.0.17'
    - "Open npm page shows 4.0.17 as published version." # see receipts

tsconfig_contract:
  file: "tsconfig.json"
  must_have.compilerOptions:
    target: "ES2024"
    lib: ["ES2024", "DOM", "DOM.Iterable"]
    jsx: "preserve"
    module: "ESNext"
    moduleResolution: "Bundler"
    strict: true
    verbatimModuleSyntax: true
    noUncheckedSideEffectImports: true
    forceConsistentCasingInFileNames: true
    skipLibCheck: false
    noEmit: true
  notes:
    - "These flags ensure precise types for Zod inferences and clean ESM usage in Next/React."

project_layout_contract:
  app_router_only: true
  must_exist: ["/app/layout.tsx", "/app/page.tsx", "/app/globals.css", "/postcss.config.mjs"]
  must_not_exist: ["/src", "/pages"]
  css_setup:
    globals_css_first_line: '@import "tailwindcss";'
  postcss:
    plugins: ["@tailwindcss/postcss"]

imports_and_packages:
  preferred_imports:
    - "import * as z from 'zod';         # root now exports Zod 4"
    - "import * as zm from 'zod/mini';   # optional, only if you opt into Zod Mini"
  allowed_alternatives:
    - "import * as z from 'zod/v4';      # subpath is still supported; root is preferred"
  forbidden_imports:
    - "'zod/v3'  # never allowed"
  notes:
    - "As of 2025-07-08 the package root 'zod' exports v4; subpaths remain forever for back-compat."

core_usage:
  parsing_apis:
    sync: ["schema.parse(input)", "schema.safeParse(input)"]
    async: ["await schema.parseAsync(input)", "await schema.safeParseAsync(input)"]
    behavior: "parse throws ZodError; safeParse returns { success, data | error }."
  type_inference:
    - "z.infer<typeof Schema>  # output type"
    - "z.input<typeof Schema>  # input type (may differ with transforms)"
    - "z.output<typeof Schema> # alias of z.infer"
  coercion:
    - "Use z.coerce.string/number/boolean/bigint — coerced schemas have input type 'unknown'." # v4 change
  transforms_vs_overwrites:
    transform: "schema.transform(fn) => changes output type"
    overwrite: "schema.overwrite(fn) => does NOT change inferred type; good for normalization"

schemas_and_methods (v4 canonical):
  primitives:
    - "z.string(), z.number(), z.bigint(), z.boolean(), z.symbol(), z.null(), z.undefined(), z.nan(), z.void()"
  numbers:
    rules:
      - "z.number() only accepts finite numbers; ±Infinity invalid"
      - "z.int() (or z.number().int()) restricts to safe integers only"
      - "z.int32() restricts to 32-bit range"
  strings:
    builtins:
      [
        "min",
        "max",
        "length",
        "regex",
        "startsWith",
        "endsWith",
        "includes",
        "trim",
        "toLowerCase",
        "toUpperCase",
        "normalize",
      ]
    formats_top_level:
      - "z.email(), z.uuid(), z.url(), z.hostname(), z.emoji(), z.base64(), z.base64url(), z.jwt()"
      - "z.nanoid(), z.cuid(), z.cuid2(), z.ulid(), z.ipv4(), z.ipv6(), z.cidrv4(), z.cidrv6()"
      - "z.iso.date(), z.iso.time(), z.iso.datetime(), z.iso.duration()"
    important_changes:
      - "Use TOP-LEVEL format validators (e.g., z.email()) — method forms on z.string() are deprecated."
  literals_and_enums:
    - "z.literal(value) or z.literal([...values])"
    - "z.enum(['red','green']) OR z.enum(YourEnum)  # z.nativeEnum() deprecated"
  arrays_tuples_sets_maps:
    arrays:
      - "z.array(T).nonempty() now ≡ .min(1) and yields T[] (not tuple type)"
      - "For [T, ...T[]] semantics use z.tuple([T], T)"
    tuples: "z.tuple([...], rest?)"
    sets: "z.set(T)"
    maps: "z.map(K, V)"
  objects:
    definition: "z.object({ ...shape })"
    strictness:
      - "Use z.strictObject({...}) for strict; z.looseObject({...}) for passthrough"
      - "z.object().strict()/passthrough() are legacy (kept for back-compat) — prefer top-level helpers"
    defaults_in_optional_fields: "Defaults inside optional fields now apply."
    shape_ops_preferred: "Prefer shape spread or .extend(); .merge() deprecated."
  unions_and_discriminators:
    - "z.union([A,B,...])"
    - "z.discriminatedUnion('tag',[...]) upgraded and more robust"
  effects_refinements:
    - "Refinements live inside schemas in v4; chain .refine() anywhere"
  functions:
    - "z.function(args, returns) — throws ZodError for invalid calls"

metadata_and_json_schema:
  registries:
    - "z.registry<T>() for typed metadata; schema.register(registry, meta)"
    - "z.globalRegistry.add(schema, meta); schema.meta(meta) adds to global registry"
    - "schema.describe(text) still exists but .meta(...) is preferred"
  json_schema:
    - "z.toJSONSchema(schema[, options]) — first-party JSON Schema conversion includes registry metadata"

error_system (v4):
  unified_error_param:
    - "Use { error: 'msg' | (issue) => string | undefined }"
  precedence:
    - "Schema-level error takes precedence over parse-context error callback"
  deprecated_removed:
    - "message (deprecated; still parses) — prefer 'error'"
    - "invalid_type_error / required_error — removed; express via error(issue)"
    - "errorMap — renamed/rolled into 'error' func; returning string allowed"
    - "ZodError#format() / #flatten() / #formErrors — deprecated; use z.treeifyError()"
    - "ZodError#addIssue(s) — deprecated; push to err.issues[] directly"

policy_allowed:
  - "Import from 'zod' (or 'zod/mini' if bundle size is critical)."
  - "Top-level format validators (z.email(), z.uuid(), …)."
  - "Refinements via .refine(), .check() (Mini), and .overwrite() for non-type-changing transforms."
  - "JSON Schema generation via z.toJSONSchema()."
  - "Metadata via registries and .meta()."

policy_forbidden_outdated_unusable:
  imports:
    - "from 'zod/v3'"
  versions:
    - "Any zod other than exactly 4.0.17"
  api_patterns:
    - "z.string().email() and other method-form formats on strings (deprecated) — use top-level z.email(), etc."
    - "invalid_type_error / required_error options"
    - "errorMap (schema or parse-time)"
    - "ZodError.format()/flatten()/formErrors()/addIssue()/addIssues()"
    - "z.nativeEnum()"
    - "z.object().nonstrict()  # removed"
    - "z.object().strip()      # deprecated; use plain z.object(shape)"
    - "z.object().merge(other) # deprecated; prefer .extend() or shape spread"
    - "z.promise(...)          # deprecated; await before parsing"
    - "z.string().ip() or .cidr()  # use z.ipv4()/z.ipv6()/z.cidrv4()/z.cidrv6()"
  number_rules:
    - "Using ±Infinity with z.number()"
    - "Using unsafe integers with z.number().int()  # switch to z.int()/z.int32()"

nextjs_integration_examples:
  route_handler_validation:
    - path: "app/api/users/route.ts"
      kind: "POST"
      code: |
        // Validate request JSON body with Zod 4.0.17
        import * as z from 'zod';

        const CreateUser = z.strictObject({
          id: z.nanoid(),
          email: z.email(),
          name: z.string().min(1),
          roles: z.array(z.enum(['admin','user'])).default(['user']),
        });

        export async function POST(req: Request): Promise<Response> {
          const json = await req.json();
          const parsed = CreateUser.safeParse(json);
          if (!parsed.success) {
            // Use treeified errors in v4
            return new Response(JSON.stringify({ error: z.treeifyError(parsed.error) }), { status: 400 });
          }
          const user = parsed.data;
          // ... do work (Server Action/DB/etc.)
          return Response.json({ ok: true, user }, { status: 201 });
        }
  server_action_example:
    code: |
      'use server';
      import * as z from 'zod';

      const FormSchema = z.strictObject({
        email: z.email({ /* pattern optional */ }),
        plan: z.enum(['free','pro','team']),
      });

      export async function submit(formData: FormData): Promise<{ ok: true }> {
        const data = Object.fromEntries(formData);
        const parsed = FormSchema.parse(data); // throws on invalid
        // ... mutate server state
        return { ok: true };
      }

tailwind_notes:
  - 'Tailwind v4 uses the ''@tailwindcss/postcss'' plugin and ''@import "tailwindcss"'' in CSS.'
  - "Classic content scanning arrays are not used in v4."

validation_matrix_ci_targets:
  package:
    - "zod dependency pinned exactly to 4.0.17; no ranges"
  code:
    - "No forbidden APIs listed above"
    - "Top-level format validators used instead of string-method forms"
  tsconfig:
    - "target ES2024"
    - "jsx preserve"
    - "strict true"
    - "verbatimModuleSyntax true"
    - "module ESNext or Node20 in non-Next CLIs"


// ===== FILE: c:\Users\eastm\Desktop\nsbs0820\.github\sourceoftruth\zustand_5_0_7.yaml =====

spec:
  name: zustand-5.0.7-ssot
  purpose: "Authoritative rules for Zustand 5.0.7 usage with Next.js App Router, TS 5.9.2 (ES2024), React 19.1.1"
  last_verified: "2025-08-15"

versions:
  zustand: "5.0.7" # EXACT — no ^, ~, ranges, or “Vx”
  next: "15.4.6" # EXACT (App Router; no /src, no /pages)
  react: "19.1.1" # EXACT
  react-dom: "19.1.1" # EXACT
  typescript: "5.9.2" # EXACT
  tailwindcss: "4.1.1" # EXACT
  "@tailwindcss/postcss": "4.1.1" # EXACT

install_and_verify:
  npm_install:
    - "npm i --save-exact zustand@5.0.7"
    - "npm i --save-exact next@15.4.6 react@19.1.1 react-dom@19.1.1"
    - "npm i -D --save-exact typescript@5.9.2 tailwindcss@4.1.1 @tailwindcss/postcss@4.1.1"
  verify_versions:
    - 'node -e "console.log(require(''zustand/package.json'').version)"  # must print 5.0.7'
  receipts:
    - "npm shows 5.0.7 as latest with published date & history." # citation below

tsconfig_contract:
  file: "tsconfig.json"
  required.compilerOptions:
    target: "ES2024"
    lib: ["ES2024", "DOM", "DOM.Iterable"]
    jsx: "preserve"
    module: "ESNext"
    moduleResolution: "Bundler"
    strict: true
    verbatimModuleSyntax: true
    noUncheckedSideEffectImports: true
    forceConsistentCasingInFileNames: true
    skipLibCheck: false
    noEmit: true

project_layout_contract:
  must_exist: ["/app/layout.tsx", "/app/page.tsx", "/app/globals.css", "/postcss.config.mjs"]
  must_not_exist: ["/src", "/pages"]
  css_setup:
    globals_css_first_line: '@import "tailwindcss";'
  postcss:
    plugins: ["@tailwindcss/postcss"]

core_apis_v5:
  imports:
    allowed:
      - "import { create } from 'zustand';        # v5 uses named export; default export dropped" # v5 release notes
      - "import { createStore } from 'zustand/vanilla';  # vanilla stores outside React"
      - "import { persist, devtools, subscribeWithSelector, combine } from 'zustand/middleware';"
      - "import { shallow } from 'zustand/shallow';"
      - "Optional: import { createWithEqualityFn } from 'zustand/traditional';  # for default equalityFn at hook creation" # RFC/discussion
    forbidden:
      - "import create from 'zustand'                # default export removed in v5"
      - "import { createContext } from 'zustand/context'  # deprecated in v4, removed in v5; use your own/provider utils"
  creating_stores:
    react_hook_store: |
      // Good (TS 5.9.2 strict)
      type CounterState = {
        count: number;
        inc: (by?: number) => void;
        reset: () => void;
      };

      export const useCounter = create<CounterState>()((set) => ({
        count: 0,
        inc: (by = 1) => set((s) => ({ count: s.count + by })),
        reset: () => set({ count: 0 }),
      }));
    vanilla_store: |
      // For non-React usage or bridging server code
      import { createStore } from 'zustand/vanilla';

      type ThemeState = { theme: 'light'|'dark'; toggle: () => void };
      export const themeStore = createStore<ThemeState>()((set, get) => ({
        theme: 'light',
        toggle: () => set({ theme: get().theme === 'light' ? 'dark' : 'light' }),
      }));
    selectors_and_equlity: |
      // Select minimal state; prefer object-pick + shallow for multiple fields
      import { shallow } from 'zustand/shallow';
      const { count, inc } = useCounter((s) => ({ count: s.count, inc: s.inc }), shallow);
  middleware_usage:
    persist:
      rule: "Use persist to store to localStorage/AsyncStorage/IDB via createJSONStorage or defaults."
      v5_change: "Persist middleware no longer writes at store creation; rehydration & writes occur after. Do not rely on creation-time write." # migration note
      example: |
        import { persist, createJSONStorage } from 'zustand/middleware';

        type Auth = { token: string | null; setToken: (t: string | null) => void };

        export const useAuth = create<Auth>()(
          persist(
            (set) => ({
              token: null,
              setToken: (t) => set({ token: t }),
            }),
            {
              name: 'auth',                               // storage key
              storage: createJSONStorage(() => localStorage),
              partialize: (s) => ({ token: s.token }),    // persist only token
            }
          )
        );
    subscribeWithSelector:
      rule: "Subscribe to derived slices outside components."
      example: |
        import { subscribeWithSelector } from 'zustand/middleware';
        export const useStore = create<{ a: number; b: number }>()(
          subscribeWithSelector(() => ({ a: 0, b: 0 })),
        );
        const unsub = useStore.subscribe(
          (s) => s.a,
          (a) => console.log('a changed:', a),
          { fireImmediately: true }
        );
    devtools:
      rule: "Wire Redux DevTools for debugging in dev only."
      example: |
        import { devtools } from 'zustand/middleware';

        type Bear = { bears: number; add: (n?: number) => void };
        export const useBear = create<Bear>()(
          devtools(
            (set) => ({
              bears: 0,
              add: (n = 1) => set((s) => ({ bears: s.bears + n })),
            }),
            { name: 'bear-store' }
          )
        );
    combine:
      rule: "Compose slices with initial state + stateCreator."
      docs: "combine(initialState, stateCreator)"
  nextjs_app_router_and_ssr:
    hydration_guide:
      rules:
        - "Client Components may call Zustand hooks directly."
        - "For SSR/streaming, prefer passing server-fetched data as props to a Client wrapper that seeds the store on mount."
        - "If using persist, expect async rehydration—render UI that tolerates null/initial values until rehydrated."
      references:
        - "Official SSR/hydration guide." # citations below
    minimal_client_wrapper: |
      // app/(feature)/page.tsx (Server Component) -> passes data down
      import Client from './client';

      export default async function Page(): Promise<JSX.Element> {
        const serverData = { initial: 3 };
        return <Client initial={serverData.initial} />;
      }

      // app/(feature)/client.tsx (Client Component)
      'use client';
      import { useEffect } from 'react';
      import { useCounter } from '@/stores/counter';

      export default function Client({ initial }: { initial: number }): JSX.Element {
        const count = useCounter((s) => s.count);
        const inc = useCounter((s) => s.inc);
        useEffect(() => { if (count === 0 && initial > 0) inc(initial); }, [count, initial, inc]);
        return <div>count: {count}</div>;
      }

best_practices:
  selection:
    - "Select the smallest slice needed; use object-picks + shallow for multiple keys." # shallow docs
    - "Avoid selecting entire state objects — causes needless re-renders."
  actions:
    - "Expose actions alongside state; prefer functional updates: set((s)=>({...}))."
    - "Keep stores serializable when using persist/devtools."
  structure:
    - "Use slice pattern for large stores; compose with combine."
  devtools:
    - "Enable only in dev; name your store for clarity."
  typescript:
    - "Always call create<T>() for perfect inference under strict mode."
    - "If you need a default equality fn for the hook itself, use createWithEqualityFn from 'zustand/traditional' (v5 path) and optionally pass shallow." # RFC link
  performance:
    - "Do side-effects outside reducers where possible; keep setters synchronous."
  security:
    - "Never persist secrets/tokens in SSR cookies via client storage; if persisting auth, scope to non-sensitive data only."

policy_forbidden_outdated_unusable:
  versions:
    - "Any zustand other than exactly 5.0.7."
    - "Any TS/Next/React/Tailwind versions other than those pinned."
  imports_and_apis:
    - "Default import: `import create from 'zustand'`  # removed in v5." # v5 release
    - "`zustand/context` API  # deprecated/removed; do not use." # deprecation to removal path
    - "Relying on persist to write at store creation (v4 behavior)  # v5 changed; do not assume."
  patterns:
    - "Selecting whole state objects in components."
    - "Mutating state objects outside set((s)=>...)."
    - "Global store hydration assumptions that ignore async persist rehydration."

validation_matrix_ci_targets:
  package_json_exact_pins:
    - "zustand == 5.0.7; no '^', '~', '*', 'x' anywhere"
    - "react == 19.1.1; react-dom == 19.1.1"
    - "next == 15.4.6"
    - "typescript == 5.9.2"
    - "tailwindcss == 4.1.1"
    - "@tailwindcss/postcss == 4.1.1"
  tsconfig_invariants:
    - "target == ES2024; jsx == preserve; strict == true; verbatimModuleSyntax == true; noUncheckedSideEffectImports == true"
  filesystem:
    - "app/layout.tsx renders <html> and <body>"
    - "No /src or /pages"
  code_checks:
    - "No default import from 'zustand'"
    - "No imports from 'zustand/context'"
    - "If multiple keys selected, prefer shallow or createWithEqualityFn"
    - "Persist handlers configured correctly; no creation-time write assumptions"
